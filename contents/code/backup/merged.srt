@@@
1
00:00:01,080 --> 00:00:14,640
I think the best history class would give each student a time machine so that they could go back through history and documented. The problem with giving everyone a time machine is that it would be too tempting to not just document but also change history.

2
00:00:15,090 --> 00:00:27,690
Heather this is rabid de lobos and in this course i'm going to show you how developers use git to docu met and change a project's history plus I'll introduce you to a cloud-based tool called git hub that lets you collaborate with others.


@@@
1
00:00:00,510 --> 00:00:14,080
You can get all the files for this course by going to this you are out. Now when you get here the only thing you need to do is take a look at this branch dropdown and choose this branch called a one oh to be.

2
00:00:15,720 --> 00:00:28,840
Not from here all you need to do is click on this code button and download this as a zip document. This will download to your local computer. And from here you can decompress this file.

3
00:00:31,170 --> 00:00:41,410
And you'll have all the files you need in this folder I'll go ahead and rename this learning. Git hub. Which is what i use when working with this in the course.


@@@
1
00:00:00,450 --> 00:00:09,460
There are different types of version control systems you can use besides get so let's talk about what they are and specifically what we call distributed version control.

2
00:00:10,140 --> 00:00:20,790
Version control also called source control lets you track and manage changes to code over time. This allows you to look at the history of your project over a period of time.

3
00:00:21,390 --> 00:00:32,040
And that means that you can backup and restored any part of the project to any previous state of the project's recorded history. There's also a collaboration app aspect to using version control.

4
00:00:32,490 --> 00:00:43,840
Developers can make changes to the project allowing an entire team of developers to work together. You can share your code with others so that they can review or comment on what you've done.

5
00:00:43,920 --> 00:00:57,790
You can also track who did what and when to a project. There are two types of professional version control architectures centralized and distributed. The main difference being where the files are stored.

6
00:00:58,110 --> 00:01:11,440
Centralized as the name implies stores all the files and the history of the files in a centralized server. The changes are tracked on the server and everyone checks out the files from that central location.

7
00:01:11,760 --> 00:01:22,660
Aversion that is apache subversion or as v n. A distributed version control system. Allows developers to keep copies of the project on their own workstations.

8
00:01:23,280 --> 00:01:33,640
In this system users make a copy of the project which is called cloning into their own machines. This local version of the source code is called the working copy.

9
00:01:33,960 --> 00:01:43,200
You can independently make changes to this working copy by committing and modifying the code. When you're ready to update the code on the server changes are then pushed.


@@@
1
00:00:00,510 --> 00:00:11,500
Let's take a minute to examine what good is. Now good is what's called a version control or source control system. In essence it lets you manage changes you've made to files over time.

2
00:00:11,610 --> 00:00:27,250
With good you're basically a historian with a time machine. You are in charge of documenting the history of your project with the added benefit of being able to jump back and forth through time but unlike normal historians you have the ability to rewrite history.

3
00:00:27,420 --> 00:00:40,590
That you can save checkpoints which are called commits and leave messages about what happened at each of these different checkpoints. The best part is another feature called branching that lets you create alternate versions of your key code.

4
00:00:40,950 --> 00:00:50,550
It's like being able to create alternate realities of your project. A branch is a copy of your project that you can work on with or without changing the original.

5
00:00:50,940 --> 00:00:59,020
You can then synchronize branches which is called merging. Or go back and forth between them. In order to use git hub you're going to need a few things.

6
00:00:59,070 --> 00:01:07,200
First of course you need to install get from the good website they may already have get in your machine but it's a good idea to make sure they have the latest version.

7
00:01:07,530 --> 00:01:20,880
Confined get at this you are all right here. Get dash scm dot com. And the scm means source control management. From there you can simply download an installer for your machine type and follow the instructor since.

8
00:01:21,360 --> 00:01:32,350
The defaults are fine for most installations. However if you're on windows one of the options is to install a terminal application called good bash which makes it easier to run linux commands.

9
00:01:32,430 --> 00:01:44,020
That's what most people use when working with git. However the commands on a windows machine are pretty similar you just have to remember that to list files you use d i are on windows instead of ls on linux.

10
00:01:44,160 --> 00:01:55,630
You'll also need a terminal to run commands. Now if you're on a Mac you can use the terminal application that comes with your machine. Or another terminal like hyper which is also available for windows.

11
00:01:55,800 --> 00:02:12,420
And that's what I'll be using in some parts of the course. I'll also be using visual studio code and here's where you can get that. Finally on most web projects you'll be using something called no js which handles most of the tools for the web so you may want to go to the website and download the installer for that.


@@@
1
00:00:00,480 --> 00:00:09,900
Let's take care of setting up a project to use get. Now the first step is to set up some of the configuration variables. Get us designed to be used by more than one person.

2
00:00:10,410 --> 00:00:20,370
You have to tell it who you are so that it will give you credit for the changes that you make. You can use the git config command and set up the user name as well as the user ie mail.

3
00:00:20,940 --> 00:00:33,910
If you already have a github account you may want to use your git hub email address here so you'll get credit on github as well. The global option make sure that every project in this computer will use the same name and email address.

4
00:00:34,140 --> 00:00:42,480
So i have a terminal open rate here you can use hyper on a Mac or a git bash on a PC and i'm going to start off by by adding those configuration variables.

5
00:00:42,810 --> 00:01:12,900
Salsa git config. With the global option. And type end user dot name. And then I'll type in my name. Next I'll type in my email address. Once you configure get the next step is to prepare the folder that is going to hold the project.

6
00:01:13,320 --> 00:01:24,190
For this project I've got a folder with some files that i'd like to manage with git. You can use your own files but if you want to find out how to get these make sure you watch the video on working with the exercises.

7
00:01:24,450 --> 00:01:40,900
Let's open this up and visual studio code. Now visual studio code has a built in terminal that you can use. You can go to the terminal menu and select new terminal.

8
00:01:42,300 --> 00:01:50,040
This terminal can use different flavors of whatever is installed and the operating system. I have seashell installed here on my Mac so that will work.

9
00:01:50,490 --> 00:02:05,050
If you're on a PC you may still want to use something like git bash. Let's start off by using the get in it command. Notice that the colors in my project changed.

10
00:02:05,100 --> 00:02:13,980
That means that this project has now been managed with get. When you initialize get it creates an invisible folder called dot g i t in the project folder.

11
00:02:14,310 --> 00:02:26,400
That this is where git stores all the information about the project if you're on linux you can take a look at it by doing an ls minus l a command. We make this a lot bigger you'll see that there is now a git folder.

12
00:02:26,790 --> 00:02:38,080
You can even switch to that folder. By doing a c d dodd get command. And then we'll do an ls minus l a command again. That's going to show us all the files that are in there.

13
00:02:38,130 --> 00:02:46,740
Get us going to write these files for us and take care of keeping track of what the project is doing. I'm going to switch back up to the previous directory with cd dot dot.

14
00:02:47,280 --> 00:02:57,480
And let's go ahead and issue a clear command. In order to create an entry that we can go back to we have to add the files to the staging environment with the add command.

15
00:02:57,930 --> 00:03:07,260
Staging is a temporary area that we can store files that we want to commit later on use the git add and then specify the file name that you want to move to staging.

16
00:03:07,710 --> 00:03:18,360
There are some alternative versions of this command. So for example the minus minus all flag will add all the files in the project. The shortcut for that is minus capital a.

17
00:03:18,750 --> 00:03:28,470
Most of the longer get up commands usually have a shortcut that's the first letter of the command. If there's more than one command with the same letter some of them will be capitalized like this one.

18
00:03:28,920 --> 00:03:37,990
There is also an even shorter way to write this the period is a shortcut and linux for the current directory so we can use that. You'll see the shortcut use very often.

19
00:03:38,250 --> 00:03:51,030
Let's go ahead and add all these files to staging. Notice that the letter right here change to an a. The last step in the process is to commit the files with the commit command.

20
00:03:51,510 --> 00:04:02,620
You always need to include a message for this. It can be a short label so that you can remember what you were doing. You issue a git commit and use the minus m flag.

21
00:04:02,970 --> 00:04:13,500
And then type in something like first commit or anything else that will make you remember what you were doing. This will target that this was one of the checkpoints that we want to track for our project.

22
00:04:13,860 --> 00:04:23,556
That way we can come back to it later. Let's go ahead and clear this out. To verify that git is keeping track of what we've done we can issue a git log command.

23
00:04:24,030 --> 00:04:31,780
You can see the entry that git has made which has been tracked and the dot git folder. You've also finished your very first commit so congratulations.


@@@
1
00:00:00,510 --> 00:00:10,260
Now that we've created our first commit let's dig into how good takes care of things. If you take a look at what you got when you issued the law command you should see something like this.

2
00:00:10,620 --> 00:00:21,970
Our sole entry starts off by listing the commit hash this is a unique ID for the commit. Next to that a hash good shows us that the head is currently in our main branch.

3
00:00:22,320 --> 00:00:32,230
Good uses branches to organize project each branch is like an alternate reality for the project. The had always points to the current reality which is called a branch.

4
00:00:32,430 --> 00:00:43,890
So this is the current branch we're working on. Now by default this branch is called main but older versions of get used the term master. On the next line you can see the name of the author and email.

5
00:00:44,250 --> 00:00:54,220
It should be the same as what we can figured with the git config command. Next they chose the date the commit was made and finally whatever message you wrote when committing the file.

6
00:00:54,420 --> 00:01:03,120
My if i had a real time machine one of the things that i change is to make sure that i understand the different git environments and states. Before i start working with get.

7
00:01:03,450 --> 00:01:14,560
So this next stuff is real important. Good has three places where you can move files. The first is the working environment. Here the files look like what they did during the last commit.

8
00:01:14,730 --> 00:01:26,130
Now before you create a new commit you can move your files to a temporary location called staging. We do this using the add command. This gives you a way to queue of changes until you're ready to commit.

9
00:01:26,460 --> 00:01:38,290
Consider it a bit like dating before marriage. The final environment is a commit. Once he moved files using the git commit command a new log entry is created with a new hash.

10
00:01:38,430 --> 00:01:48,840
Now before commit files can be in one of two main states. The first extract files these are files that existed in the previous snapshot which is another name for the commit that you did.

11
00:01:49,410 --> 00:02:05,670
Untracked files are anything else so for example a new file added since the last commit. Track files can also be in several states. Unmodified means that the files haven't changed since the last commit and of course modified means that the files have been changed.

12
00:02:06,120 --> 00:02:20,260
Final Lee they can also be n staging. And listed as staged they happen moved into that staging environment. You can take a look at what's happening with the command called git status let's take a look at how that works.

13
00:02:20,700 --> 00:02:35,070
I'm going to go ahead and clear my screen and type in git status. You can see that right now there is nothing new we haven't made any changes to any of the files so we're still on branch main and we have nothing to commit so our working tree is clean.

14
00:02:35,490 --> 00:02:50,260
Let's go ahead and make a change into this read me file. And going to the lead this last paragraph right here. I'm going to save this. And you'll see that my file now has a different color.

15
00:02:50,580 --> 00:03:03,960
And will issue the git status command again. Now the first line is showing you the current branch. And then the next few lines tells you about what's happening with the current environment it says that there are some changes that haven't been staged for commit.

16
00:03:04,350 --> 00:03:13,260
So they're in their working directory but their status has changed. So right now we have two options we can use the add command to move these files into staging.

17
00:03:13,590 --> 00:03:23,820
Or we can discard the changes we've made using the restore command. We've already use the add command so let's try the restore command. Others a few ways that you can run this.

18
00:03:24,240 --> 00:03:37,500
You can issue a good restore command and with the file name. Or use the period to restore your current directory it's definitely a lot shorter. You may also see the git checkout period command used in a lot of different places.

19
00:03:37,920 --> 00:03:48,150
This is an older version of the restore command that is still in use. I think restore makes a lot more sense. Since checkout can be used in all a ways to go back into her project.

20
00:03:48,630 --> 00:04:01,080
I'll go ahead and clear the terminal. And i can issue the good ad and here i can type in the name of the file directly like read me dot m d. Or i can use the shortcode and just say good ad period.

21
00:04:01,410 --> 00:04:12,580
This adds everything in the current directory. Let's go ahead and clear this out and do a new git status command. Now you can see that we have changes and staging ready to be committed.

22
00:04:12,660 --> 00:04:23,980
If we want to we can move them out of the staging command using the restore command with the extra stage flag. Which you can shorten to capital s. Let's go ahead and do that.

23
00:04:30,330 --> 00:04:42,220
Once again let's clear this out. And do a git status now we're back to where we were a minute ago. Let's go ahead and use git restore to get rid of the changes that we made to this read me.

24
00:04:43,620 --> 00:04:55,840
Now notice that the changes come back in the original file. And this looks like pretty much what we had in the last commit. Now let's see what happens when we add a new file.

25
00:04:57,810 --> 00:05:07,860
We'll go ahead and add a file called notes. Dot m d. This will have some notes for our project. Let's go to the terminal and use the git status command to see what's happening.

26
00:05:08,400 --> 00:05:26,020
Now you'll notice that it says that we have untracked files let's try issuing the get restore command see what happens. Now notice that it didn't do anything to the notes document and that's because good isn't doing anything with untracked files so if you want to get rid of notes you would have to deleted manually.

27
00:05:26,190 --> 00:05:41,760
Let's go ahead and get rid of it. Now we can say. Clear and git status again. I can see that everything looks like it did before in our last commit. Now trust me the most important thing that you can understand is how the different environments work.

28
00:05:42,210 --> 00:05:50,890
As well as the file states and what each of them does this will make it easier to understand what is happening with your HP project. As it gets more complicated.


@@@
1
00:00:00,480 --> 00:00:10,350
Get as great a track and files but you don't always have to track everything. You could have some files with some passwords or other sensitive information that you don't want to share with others.

2
00:00:10,740 --> 00:00:23,490
That could be authentication tokens Apia keys etc. Ignore files aren't uploaded to get hub so this is a great way to add notes that you don't need to share with others so for example a great place to keep two items.

3
00:00:23,970 --> 00:00:35,070
Operating systems and applications can have settings that you don't need to share as well macro as for example keeps a file called dia store on most folders to keep track of all the files within those folders.

4
00:00:35,670 --> 00:00:52,380
Visual studio code can have a list of local preferences. Enter vs code folder. To take care of ignoring files you can create a good ignore file at the root level of your project and inside that file you can add any type of file or patterns that you want to ignore.

5
00:00:52,890 --> 00:01:08,920
For example you can add an entry for the ds store file as well as the vs code folder. Notice that the folder has a slash at the end. If your project requires it you can add a file here like authentication DJs to store any tokens Apia keys etc.

6
00:01:09,270 --> 00:01:27,990
And other common file is called node modules. This is created by n p m when working on a lot of web projects so we can add that here. You can also add a notes folder for lower called notes about the project that you don't want to share or you can create a special extension and add the nodes anywhere in your project.

7
00:01:28,440 --> 00:01:40,540
By the way git doesn't track empty folders so you don't have to worry about those. I'm going to go ahead and copy these right here and i'm going to go back to my project and create a file in my editor.

8
00:01:40,620 --> 00:02:04,570
I'll call it git ignore. And I'll go ahead and paste those things into my file. Now go ahead and save it. And added. And committed. Once that's committed i can start adding those type of folders so let's go ahead and add a notes folder.

9
00:02:06,840 --> 00:02:24,790
In anything in here will not be tracked but i do need to put something in there so I'll add a. Project. To do that md file. And you can see that get grace this file out which means that this file will not be tracked by it so if i did a git status.

10
00:02:25,050 --> 00:02:39,930
It would say that there's nothing to commit even though that's a new file. If i add another file here. And put it in the main folder. It's still going to get ignored.

11
00:02:40,350 --> 00:03:01,500
Because this extension is automatically ignored in the files that I've added right here. There's a couple of other tips that you can use you can create your own global ignore file and that way if you have a lot of different projects you can add this as a config variable pointing to a file in your hard drive you can add anything you want in there and whenever you create a new project.

12
00:03:01,860 --> 00:03:10,140
It will pick up this file automatically. Now another thing that can happen is that if you add something to the git ignore file after you've done a lot of commits.

13
00:03:10,500 --> 00:03:38,190
Sometimes the way that get caches information locally. Will get a little bit dirty so in order to clear that you can issue issue this command git r m minus r and then use the cached option with a period for the current folder and it'll delete all of the files that our cash recursively you may have to do another add and commit but this will clear out your cache and your get ignore should work after that.

14
00:03:38,640 --> 00:04:05,200
One of the reasons i wanted to talk about the git ignore file this early is that you may already be seeing folders like the d s or folder on Mac o s. Appear or perhaps you've modified some settings on visual studio code and you would see a vs code file and you want to make sure that those things are not tracked by get before you get started on your PR project so it's a good idea to work with the git ignore file at the very beginning of when you're setting things up.


@@@
1
00:00:00,510 --> 00:00:09,870
As you're working with your good projects you'll need to rename move or delete certain files. The way they get handles these normal file operations can be a bit confusing.

2
00:00:10,200 --> 00:00:24,150
So let's go over those. Now deleting is the simpler of the different functions that we can perform so let's go ahead and start with that. There's two ways to delete files managed by git now the first is the obvious just deleting the file from your file system.

3
00:00:24,469 --> 00:00:39,340
We can do that from visual studio code by right clicking on a file and then select and delete or using the shortcut rate here you can also go to the operating system look in your folder and get rid of the files that way as well now if we do a git status.

4
00:00:39,420 --> 00:00:48,270
You'll see that it re records that deletion. As a separate function so it's actually recording a deletion as something that you need to add into staging.

5
00:00:48,660 --> 00:01:01,200
Now if you want to you can go ahead and do git add and then commit the files that's one way of doing this now you can also restore the file by issuing the get restore command and we'll just use period here.

6
00:01:01,770 --> 00:01:10,860
Let's go ahead clear this out. That'll bring back our index that html and you can see that there is nothing to commit we have a working tree that is currently clean.

7
00:01:11,370 --> 00:01:23,530
The other way to delete a file is by using the get rm command and then type it in the file that you want to delete. Now this gets rid of the file but it does something else let's take a look at the status.

8
00:01:23,880 --> 00:01:43,830
Now this is actually deleted the file and is automatically moved that deletion into staging so this is already to commit so that saves us a step now who want to undo this function we have to do it in two parts we can say get re store and this time we can use minus minus staged or just use minus s.

9
00:01:44,400 --> 00:01:52,920
And we'll just do a period here you can type in the file name if you want to. So this is going to restore the file from staging into the working directory.

10
00:01:53,250 --> 00:02:09,060
Let's clear out and do a git log. That was a mistake let's go ahead clear this out and do it get status. And you can see that now the file is looking like it did a minute ago it is recorded as a deletion that needs to be added into staging so once again we can get.

11
00:02:09,450 --> 00:02:21,850
Restored this time without the s flag and just hit the period right here. Now the index html comes back. En. Grande clear this out. And the status should be clear.

12
00:02:23,190 --> 00:02:37,110
Now similar to the leading files you can rename files in a couple of different ways but the way git handle this is pretty interesting. Too can simply rename things in the operating system i can click on a file in visual studio code and just give it a different name.

13
00:02:37,710 --> 00:02:57,120
Now if i do a git status. You'll notice that it's recording it as two different things. Is recording the deletion of index that html and then an addition of a new file called home that html so this sort of makes sense and this is really just a way that linux deals with files.

14
00:02:57,480 --> 00:03:14,400
When you rename something what you're doing is creating a new file file and then deleting the old one. Now undoing this is going to be a little bit harder you can unstitch the files but at some point you will try to keep both copies of the two files so let's go ahead and do that we'll try doing.

15
00:03:14,880 --> 00:03:27,940
Good restore period. Let's clear this out you'll see that index html reappeared. Git status. And you can see that now we still have home in there so all we have to do is delete it.

16
00:03:30,900 --> 00:03:41,670
And now things look like they did before. Let's clear this out git status again and there's nothing to commit. N let's go back and clear this out as well.

17
00:03:42,060 --> 00:03:52,960
Now just like with the delete command we have a command to take care of renaming but it's a little bit weird. It's called get em v and then we can give it the name of the father we want to rename.

18
00:03:53,880 --> 00:04:11,470
And the new name after that. So you can see that the index html file got changed into home html and we can do a git status to see what that looks like succeed at this again saves lives the step of staging the files and it goes directly.

19
00:04:11,640 --> 00:04:23,020
Into something that we can commit now undoing this would have to be done in the same way that we did the legion but since we can rename files like this we can also go backwards.

20
00:04:23,220 --> 00:04:38,950
And type in n. M v. And just reverse what we type in here so we can say rename home. That html to index that html so get em v and then reverse the names of the files.

21
00:04:39,000 --> 00:05:05,910
And now this one will be index html and if we do a git status. It says that there's nothing to commit. I think that you have to rim member here is that good is always looking at what you're doing based on the last commit so since we renamed the file back to what it used to be it compares everything that we've done to the last commit and realizes that there's nothing that's different and so that's why it's telling you that there's nothing to commit.

22
00:05:06,330 --> 00:05:21,840
In other words there haven't really been any changes to any files. That you might be wondering why m v instead of something like Iran or rename or something like that it doesn't sound anything like rename in linux mv is a command that moves files and it's what you use to rename things.

23
00:05:22,170 --> 00:05:33,570
Move is doing the same thing that git does when you renamed the file. Moving the file with a new name and then delete eating the old one. Nugget mv does make it easier to go back just move the files back if you want to.

24
00:05:33,900 --> 00:05:52,950
However i continuously delete files just with the operating system or i delete files by just renaming them and most of the confusion when i was learning it was about what happened to my files it does all these kind of weird things that you can see right here and it's good to get used to them by practice them a little bit.

25
00:05:53,460 --> 00:06:08,530
It's a good idea to use git status as often as possible when you're learning to see what's going on. Make sure you spend some time practicing commands especially deleting things renaming and moving things otherwise gets going to be really confusing until you get used to.


@@@
1
00:00:00,480 --> 00:00:14,700
Good gives you a lot of freedom to experiment with your code and one of the features that can really help is showing the differences between files. Let's go back into our project and i'm going to go to this read me document and delete this last paragraph right here.

2
00:00:15,030 --> 00:00:30,090
Then I'll go ahead and save it. And I'll do a git. Diff. Now this command is going to show you the difference between these two files. You can see that we have deleted and that's what this minus means right here.

3
00:00:30,630 --> 00:00:47,530
Not only the paragraph but also this carriage return that was right here. Now let's go ahead and undo this. And save it. Clear this out. And will do a get.

4
00:00:48,270 --> 00:01:03,100
Def again there's no differences between those two. And if we do some more changes let's go ahead and add a new folder. We'll call it docks. And i'm going to move all of my html documents onto that docs folder.

5
00:01:05,490 --> 00:01:30,870
Now let's try doing a git diff. Now it's showing us all the different changes but the changes here involved a move and if you remember from the last video we saw that moving means that you're deleting a file and then you're adding another file so to see this entire change i have to scroll all the way down for a long time whenever you see that colon right there or if you want to exit you can hit the q key.

6
00:01:31,350 --> 00:01:46,170
Let's go ahead and clear this out. And. It's a little bit difficult to use that git diff command. In the terminal whenever you have a lot of changes so to do that v visuals to your code provides a source control editor.

7
00:01:46,590 --> 00:02:04,320
Now here you can see what happened we have deleted these three files and updated or added these other files remember. That renaming or moving things causes these kind of changes but you can see that the changes are recorded as a deletion of files and then.

8
00:02:04,770 --> 00:02:16,300
An updating of some other files there's a lot of functionality that this the screen hassle for example if i click on the plus sign i can go ahead and stage the changes directly from this interface.

9
00:02:17,910 --> 00:02:29,770
And we can take a look at git status and go ahead and add all the files go ahead just add everything into staging. And that automatically will updated everything that is right here.

10
00:02:30,870 --> 00:02:48,100
That's pretty cool. Let's go ahead and commit this change. Right you can see that there are no longer any changes in this source control tab. Will go back into the editor.

11
00:02:48,270 --> 00:02:57,240
And let's go ahead and clear this out. Now this is pretty flexible you can use it to compare all types of things. So for example you can compare a file to estate.

12
00:02:57,570 --> 00:03:09,160
At any one of your other commits. Like comparing here history you'll often check the log to see what the changes were. When your logs get really long so if i do a git log right now.

13
00:03:09,360 --> 00:03:22,980
You can see that i get that scrolling text and this can be really long so there is a better way to do a git log. And that is with the one line flag this puts the commits in order and also shows them to you all in a single line.

14
00:03:23,370 --> 00:03:43,320
Can tell that it has a little bit of the hash at the beginning. Plus the fact that the head pointer is pointing to the main branch. N then the commit messages this is a great way to take a look at your commit and it's also a great way to take a look and compare what you've done right now with some other commit.

15
00:03:43,800 --> 00:03:59,400
So if i want to i can do a good def. N type n one of these other commits here. And it's going to show you the differences between those two comments now this is not as useful and there is an extension that you should try using.

16
00:03:59,880 --> 00:04:08,650
If you are doing a lot of dipping between branches and checkpoints. It's called get lens and you can get it from the visuals to yoko code marketplace.


@@@
1
00:00:00,480 --> 00:00:11,190
Now it's good to think of what you're doing with good as documenting the history of your projects. And like i mentioned in the intro unlike most historians you have a time machine that lets you change history.

2
00:00:11,610 --> 00:00:19,230
Let's take a look at some of the ways that we can do that. Are the first one is called amending. You can often end up committing something that's not quite right.

3
00:00:19,560 --> 00:00:30,040
You can create a new commit but that ends up creating a messy history with a commit for a simple fix. To add things to the last commit you can use the Amanda flag.

4
00:00:30,330 --> 00:00:44,880
And when you do that it's going to launch your default editor and allow you to edit the file with the amended history. Now if you don't want to do that you can type in the ma minus m flag and select a new commit message type it in right there.

5
00:00:45,600 --> 00:00:54,630
Finally you can also select the no edit function if you just want to leave the message the same as what you did in the last comment let's take a look at how that works.

6
00:00:55,170 --> 00:01:09,700
So i have these different files in the docs folder. And i realize that on my index html file. I have this navigation and in my navigation i have a number of text uppercase classes.

7
00:01:09,930 --> 00:01:20,130
That's making the navigation be upper case in certain places but it would be more economical to go ahead and put that directly here in this nap class.

8
00:01:20,490 --> 00:01:37,600
Though that way it will affect everything inside. This naff section. So what i'm going to do is make a change right here. Text uppercase. And then i'm going to delete the other instances of text uppercase.

9
00:01:49,260 --> 00:02:09,340
Let's go ahead and save that. And will commit this change. Now after I've done this i realized that i really needed to do this in all the other documents.

10
00:02:09,570 --> 00:02:21,900
So if i take a look at my log. I have all these commits including this last commit that i did now the changes that i'm going to make in the other files are going to be exactly the same.

11
00:02:22,260 --> 00:02:31,660
So i don't really need to make a new commit i just need to fix the same things in the other files. So i'm going to grab let's see. These lines rate here.

12
00:02:31,920 --> 00:02:55,360
As and I'll go over to the navigation. And paste those changes. Make sure that i also come up here to this nav. And i add text. Upper case here. And we'll go ahead and copy this line.

13
00:03:00,120 --> 00:03:17,460
And we'll make sure that that's added here. And also will make sure that all these things have been saved. So you can see the modifications are here and here and if i open up source control i can check to make sure that I've done all the changes.

14
00:03:17,790 --> 00:03:26,370
By clicking right here and you can see the changes side by side. This differing in visual studio code is really nice and you can really see the changes.

15
00:03:26,760 --> 00:03:37,440
Synced up before and after sigh side by side pretty awesome. Also from here i can of course open the file discard the changes and set stuff back. Not what i want to do.

16
00:03:38,040 --> 00:03:54,580
Let's go back. Here into the explorer. Then go ahead and close these out. Emerald clear this screen. And i want to do a git commit. Minus minus amend.

17
00:03:55,380 --> 00:04:08,770
Now this is going to open my default editor. In my computer this is set up as Adam and what it's doing here has given me the option of modifying the commit message here if you'd want to do anything you could just closest.

18
00:04:09,300 --> 00:04:25,090
But i'm going to change it to say simplified text uppercase n files and then i'm going to save this and close out of this application. And when i go back it'll say that it went ahead and change one file with three insertions.

19
00:04:25,230 --> 00:04:43,770
Let's go ahead and do the git log. One line here and you can see that he didn't create a new comment it just modified the last one and it did update the text of the commit because i did that in in the other document with the other commands if you do get commit demand minus m.

20
00:04:44,100 --> 00:05:08,760
You can do the tax change directly in the terminal and if you don't want to edit the last message you can just say git commit amend with the no edit option the one thing i'm always trying to type in amend with two m's i'm not sure if you'll run into that in the same way that when i do get log one line occasionally I'll do get log online I'll miss the e i'm not sure what's happening with me but.

21
00:05:09,180 --> 00:05:25,450
Just a couple of things to watch out for. And you can also do what's called a reset resetting lets you go back to a previous commit to think of that as a rewind feature we can do this by using the hashtags from the log so we can say something like.

22
00:05:25,500 --> 00:05:40,380
Get reset. And then. Select one of these hashtags from the log. And what that will do is it will undo some of the changes so it onstage the changes after the reset for us.

23
00:05:40,890 --> 00:05:53,602
So it's essentially move back the head to another commit now it didn't actually do anything to the file so then delete the files but it did rewind the commit so let's do a git log.

24
00:05:54,600 --> 00:06:10,350
One line again. You can see that now instead of having four different commits i have three different comments twit stopped right there. Another nice thing is that it took all the files and put them back in their original state.

25
00:06:10,680 --> 00:06:24,640
It didn't delete the changes that i have made to these files. You can see that if i look for the navigation. I have my texts uppercase text right there and it's shows them as being modified.

26
00:06:26,760 --> 00:06:41,800
So we can do get status and notice that we can go ahead and add all these files so you can say git add period. And git commit. Minus m. And type in the commit message.

27
00:06:49,470 --> 00:07:01,620
Now we have a new commit with a new ID. Grand clear this out and do a git log. One line. And we can see that now we have a new commit with a new message.

28
00:07:01,980 --> 00:07:12,250
There's another version of this command it's a little bit dangerous. And it's the git reset with the hard option you'll see that sometimes so you can say get reset.

29
00:07:12,510 --> 00:07:24,900
Minus minus hard and then you put in an ID this command will delete any commit before this one right here. And it'll also change all the files so it'll actually get rid of all of my changes.

30
00:07:25,260 --> 00:07:41,410
The non hard or the soft reset it is a little bit safer and i suggest that you try that one but sometimes you do want to sort of reset hard to a specific commit to actually rewind time to a specific checkpoint and go forward from there.

31
00:07:41,670 --> 00:07:49,890
Now rebasing is another way of changing history and it's designed to take the commence from one branch and apply them to another here's the way that you use it.

32
00:07:50,220 --> 00:08:02,370
You select git rebase and then you specify a branch or a commit. Now there's a really useful interactive command that will let you use your text editor to make changes this is actually the best way to use rebase.

33
00:08:02,790 --> 00:08:20,680
Instead of a branch you can use the head pointer to modify the current branches directory. You can see that right here so we can say good rebase and i want you to rebase by moving back to a certain number of commits but that's useful if you have an extremely long commit history and you only want to go back a few steps.

34
00:08:20,820 --> 00:08:30,600
There's another option to let you see all the commits we have so few commits in our project that we can use this one safely. Let's say for exam apple then after you've done a few commits.

35
00:08:30,960 --> 00:08:40,270
You realize that there's something that you should have done earlier. Go ahead clear the salad before i execute that hard reset. That will be dangerous here and.

36
00:08:41,160 --> 00:08:51,960
We'll go into the license file and i realized that i should have used the company name here. So i'm gonna make that change. I'm going to save that. And add it.

37
00:08:52,650 --> 00:09:33,060
And committed. If i look at the log. You can see that all my comments are in order but i really should have done this. Over here right a little bit earlier i should have added that modification and so i can rewrite the history so that this updating of the license actually happens after my first commit so would happen before this getting nor file in essence i can move any of this commit around and all the changes that were in there will happen at a different point in time this is exactly like having a time machine.

38
00:09:33,600 --> 00:09:52,030
Now to do this. Let's go ahead and do a git rebase. We'll do an interactive version and will use the route now you can here use. The head pointer. And then just go back to say the last three commits let's try that first.

39
00:09:52,590 --> 00:10:07,840
This will open up my editor again you can see that we have the last three commits listed there's a bunch of other stuff. Right here. I'll show you that again in just a second so let's go ahead and quit this if you just quit it doesn't really do anything.

40
00:10:07,920 --> 00:10:19,978
Let's go ahead clear this out and we'll use instead of the had three. Will. Git rebase minus i. With the route option this will bring us all of our commits.

41
00:10:20,118 --> 00:10:32,518
And now let's take a look at the options that you can perform right here. You can see that we have the first commit and all the other commits in order including this updated license that we just performed.

42
00:10:32,568 --> 00:10:48,258
Now we want to do is take this one. And make it happen. Before. Right and there's a lot of other options that we can perform here so for example we can modify by doing what's called a squash commit.

43
00:10:48,678 --> 00:11:04,378
This would take the commit. Any of these files or hear any of these commits and squash it into. The previous comment so it's going to take what we did here and combine it with our first commit so it would be as if whenever i created this document.

44
00:11:04,488 --> 00:11:12,738
It would automatically be part of this first commit which is probably the way that it should look it should look like i had already had the proper license.

45
00:11:13,068 --> 00:11:25,738
When i first loaded this so i could do that and then there's another option called fix up and this it was actually pretty cool because otherwise it's going to keep both of the commit logs messages.

46
00:11:25,908 --> 00:11:36,958
So what i'm going to do is i'm going to do eight fix up commit this is like a squash is going to combine these two things but then it's going to not use the commit message.

47
00:11:37,158 --> 00:11:52,978
Let's go ahead and save this. And we'll close this out. And now. Let's go ahead and take a look at the log. So you can see that my previous comment making the change to this license has disappeared.

48
00:11:53,028 --> 00:12:06,868
It's actually been combined into this first commit so you can see that good rebasing is a fantastic way to completely rewrite the history and reorganize the order in which commits are made.


@@@
1
00:00:00,480 --> 00:00:13,030
One of the most powerful features of get is the ability to create branches or branches let you create different versions of your code so that you can play around with adding new features without worrying about messing up what stable.

2
00:00:13,230 --> 00:00:23,230
The simplest command you can use is called branch it lets you take a look at all the branches in your repository right now we only have a a single branch so if we take a look at our project.

3
00:00:23,430 --> 00:00:35,140
And we do get branch. You'll see that we have a single branch called main. Typically what you want to do is make a copy of an existing branch you can do that with the git switch command.

4
00:00:35,430 --> 00:00:55,170
It'll have the same history as the current branch there's a slightly older version of this command called git checkout and you may see that in a lot of examples notice that would get checkout you have to do git checkout minus b and then the name of the new branch that you want to create whereas with git switch it gets which minus c and then the name.

5
00:00:55,620 --> 00:01:32,500
Let's go ahead and do that in our project. So in my project I've noticed that i have a few odis shuttle classes that i want to get rid of. So for example i have this site header class and the way that i created this small website was by copying things from a previous project and i forgot to take away the side header tag as well as this site and nav tag and also this family sir dance class everything else is a bootstrap class and these are just extra classes that i had added in a previous project so i'm going to create a new branch to take care of those things.

6
00:01:32,730 --> 00:01:46,510
Let's go ahead and issue a get switch. Minus c. And I'll call this branch fix classes. Now notice that it's that that is switch to a new branch and if i do a git status.

7
00:01:47,640 --> 00:02:02,410
It'll show me that i'm now on branch fix classes. Right to take care of these different changes what i'm going to do. Is do a search and replace so that i change all the files someone a copy this site hunter.

8
00:02:03,030 --> 00:02:23,020
And i'm in visual studio code here so i can do a replace in files command right here. And it's going to find site header and replace it with nothing. So we'll hit this button right here and it's going to replace all the files that have that class and I'll do the same thing with site nav.

9
00:02:23,070 --> 00:02:39,400
And this family sands. Once again I'll take this tax and replace it with nothing solid click on this button right here. Is going to replace everything in three files.

10
00:02:39,512 --> 00:02:53,620
That's all i need to do. So let's go ahead and. Let's clear this out. And take a look at the status. Is showing me those files if i want to i can preview the changes huh here n v get tab.

11
00:02:53,670 --> 00:03:03,640
So i can take a look at each one of those files and see where those changes were made. Everything looks good to me so i'm going to add and commit these changes.

12
00:03:04,020 --> 00:03:35,860
So let's go ahead and clear this out. Alright so now if i do a git log. It tells me that i have added this you commit here and it's also telling me that Maine is still in this old state so it's actually notice that I've done a commit here in this new branch but i haven't edited into me.

13
00:03:36,150 --> 00:03:48,180
So now that we're ready to synchronize what we're doing in our new branch with our main branch will need to know about merging. The merge command will merge the changes from one branch into the current branch and it looks like this.

14
00:03:48,570 --> 00:04:00,210
This command will change the merges from the branch i specify right here. Into the current branch so in our case we have to switch back. Into the main branch and then execute this command.

15
00:04:00,570 --> 00:04:15,840
Let's go ahead and do that with our project. It's clear this out. Will do a git. Switch main now we're in the main branch. And let's do git branch so he can see that we have two branches right here.

16
00:04:16,380 --> 00:04:32,980
And so what we'll do is use git merge. And we'll add the fix classes branch. Now this is added all of the changes from our new branch into to the main branch clear this out and if i do a git log.

17
00:04:33,480 --> 00:04:58,800
One line. You'll see that new commit. Right here on the main branch. Now i still have the other branch. So when you're done with a feature or fix it's a good idea to delete the branch that you no longer need to do that you can execute the git branch and then with the delete option specify the name of the branch that you want to delete.

18
00:04:59,190 --> 00:05:10,890
There's a couple of options you can use this minus d option. As long as the branches are free of conflicts. The minas de forces get to ignore things and just delete the branch.

19
00:05:11,370 --> 00:05:26,710
Case let's go ahead and clear this out. And will delete fix classes. So i do this sometimes i forgot to do the git branch. And then minus d. And then fix.

20
00:05:26,760 --> 00:05:41,730
Classes. Right so it deleted that branch. Is clear this out and we'll do git branch now there's only one branch. This sequence of doing things is what we call git flow you create a new branch that's usually a feature or a fixed branch.

21
00:05:42,090 --> 00:05:50,980
You make changes to that branch then you merge that branch back to master and then you delete the old branch this is how developers work on real projects.

22
00:05:51,030 --> 00:06:05,460
Now every company has a different version of this but it follows this general pattern. When you collaborate with other people everyone leaves the main branch alone you can see that things would get really messy if everybody were was trying to work on the same branch.


@@@
1
00:00:00,540 --> 00:00:13,260
Every good user has to learn how to work with complex when working on a project. So let's practice dealing with them. Conflicts happen when you're merging two branches but you or somebody else has made changes to the same items in a file.

2
00:00:13,740 --> 00:00:31,690
So for example we can have a main branch and then do a commit on that main branch and then two different people can create different features for example we can have another user create a different fix for our project and then merged that back into the main branch.

3
00:00:31,770 --> 00:00:43,680
Now in addition to that we could be working on our own feature branch and create a fix on our project and then merged that back into the pi project but if another fix has been made before then.

4
00:00:44,010 --> 00:01:04,620
That tends to cause merge conflicts so let's take a look at how that works in our project. Now if we take a look at the index html document at about line forty six you'll notice that this introduction text is on a headline level three and if you take a peek at either the columns or the media file.

5
00:01:05,010 --> 00:01:21,630
Both of those use a larger font size eight h two right here with aid this play four which is going to make it look even bigger because. This is a bootstrap class that makes your text look really big and what we want to do is make sure that they're all sort of displaying in the same way.

6
00:01:22,080 --> 00:01:39,090
Now i'm going to go ahead and pull this website up on a browser so to do that i do have an additional extension that i I've installed. Called live preview so you can go to the extension tabs in visual studio code and take a look at this extension called live server.

7
00:01:39,480 --> 00:01:52,680
Once you have that installed what you can do. Is hit command shift p. And then type n. Live server and this will open the file with the live server is going to open up a new browser window.

8
00:01:53,040 --> 00:02:02,730
He can take a look at what our website looks like and if we make a change we can preview it so i'm going to make this pretty small here. Just to show you the difference in the font sizes.

9
00:02:03,150 --> 00:02:12,720
Sustain me that a server has started for us. And let's make this a little bigger actually so can see the menus. And then if we go to the home page you can see here.

10
00:02:13,110 --> 00:02:30,790
That this is a smaller font than either what's here and columns or media so to fix this let's go ahead and. Go back to the home page. To fix this i'm going to use git flow.

11
00:02:30,900 --> 00:02:47,380
To start a branch to fix that headline. Something to say get switch minus c and then fix headline. And so what i want to do is make sure that my display for class.

12
00:02:47,460 --> 00:03:01,450
Is included in my index html file so I'll go back here into index html. So i get a matter that this is an h three i could fix that if i wanted to but I'll just add the display lay for class.

13
00:03:01,500 --> 00:03:15,730
Into the index html page and you can see that now this introduction is the same size as. In the other different pages here. So that's great that's a fantastic fix so let's go ahead and add this.

14
00:03:21,780 --> 00:03:37,420
Make sure that we have saved it looks like i did because it does have the m right here. And then will say get at period. Git commit. Minus m. And I'll add a message here.

15
00:03:41,220 --> 00:03:55,110
Right to that is done before we merge this let's make a change to our project that will cause a conflict on purpose or normally this will happen when you're working with somebody else and somebody else has made changes to some sort of file that you're working on.

16
00:03:55,560 --> 00:04:10,380
When you try to merge it back you'll notice these kind of aw or is this going to happen also whenever. You are working on a feature but you're not quite done with it and you have to jump in the main branch and maybe create a quick fix for a typo or something that you've seen.

17
00:04:10,800 --> 00:04:24,510
When you come back to the other branch that new change. Will not be on that branch and so that's why you need to usually do emerge that will create some sort of merge conflict so let's go ahead and.

18
00:04:24,840 --> 00:04:38,290
Go back into the main branch so we'll leave this branch alone for an hour clear this out. And I'll go back into the main branch and when i do that i should see that my index that html.

19
00:04:39,060 --> 00:05:05,700
Has the. Class taken out of it right. This new class that i added that display for classes no longer there. So that's good. I didn't notice when i was working on those changes that there's actually a Tex reverse class and it's actually being used in a couple of places you can see it here and here and this is another one of those classes that is not a bootstrap class and that i should really remove from everywhere on my website.

20
00:05:06,030 --> 00:05:18,400
So i'm going to do a search and i can do that by clicking here. And i'm going to look for a text reverse. And then i'm going to replace that with nothing.

21
00:05:18,510 --> 00:05:27,250
Notice that it's noticing actually that it's only in the index that html page so i'm gonna hit this button here to replace those. Is going to replace the two instances.

22
00:05:27,600 --> 00:05:46,450
And i'm not going to create a new feature branch for this I'll just go ahead and do it directly. Into the main branch so I'll save this. And actually let me go ahead and in this case also remove just this class because here it wouldn't make any sense to have a class that is completely empty so I'll do that.

23
00:05:46,830 --> 00:06:04,740
And I'll do a good ad. Git commit. And then just put in a message that i remove. Tax reverse classes. Right so now i have two different branches and they're in two different states.

24
00:06:05,100 --> 00:06:14,670
Let's go ahead clear this out and we'll go ahead and switch to the other branch so if we do a git branch you'll notice that i have my main branch as well as my fix headline ranch.

25
00:06:15,090 --> 00:06:28,410
So we'll do a git switch. Fix headline. I switched to that branch and you'll see here that i do have the display for class but i also have the text reverse class.

26
00:06:28,800 --> 00:06:50,100
So let's go ahead and. Go back. Two Maine. And will do emerge of that other branch so get merge. Fix headline. I to when we do that you will run into this thing called.

27
00:06:50,430 --> 00:07:08,340
Emerge conflict and. If you're using visual studio code it's actually going to try to help you quite a bit in resolving. This merge conflict but what it's going to do is going to give you these little arrows rate here telling you that in the main br ranch this is the way that this text looks right now.

28
00:07:08,940 --> 00:07:26,640
And then it says to change that you're trying to merge. In this fix headline branch. Is the incoming change and that is this right here so it's trying to ask you which one of these do you want the want just the headline with no classes or the one the set line.

29
00:07:27,030 --> 00:07:40,800
With this classes everything else. It's actually going to be fine there are no other. Conflicts in this page. It didn't. Worry about this other piece of text being gone here so what i can do is.

30
00:07:41,166 --> 00:07:54,300
Remember i'm in the main branch i want to accept the incoming change. And then i'm going to manually remove this text reverse here. Right. And I'll clean this up right here.

31
00:07:54,870 --> 00:08:11,370
Now if you are in another editor you can still use those arrows the arrows just tell you. What the current branch is and what the new branch or the incoming branch would be now also notice that add visual studio code is giving you this little window right here this little green sort of section right here.

32
00:08:11,790 --> 00:08:20,250
That is telling you that you've made some changes in the current. Project as well so that's kind of good it's telling you. Where the changes have been made.

33
00:08:20,580 --> 00:08:44,250
Now that I've made those changes i can go ahead and. Add everything. And commit a new fix. And. I'll do the good lord. One line. And sometimes i do online so.

34
00:08:44,730 --> 00:09:05,760
One line and you can see that. Everything has been. Added into this page and you can even see that the fix that line branch is sitting at this commits is the last thing we did over there there and we merged all the changes into this branch and then we fixed the merge conflicts now that was a pretty easy merge conflict to fix.

35
00:09:06,180 --> 00:09:23,470
They might be a little more intense but all you have to do is remember that you have to choose. Which one of the branches you want to use or which one of the changes you want to use and then accept them everywhere in your project.

36
00:09:23,580 --> 00:09:35,580
Now it looks like i need to go ahead and. Make sure that i save this we'll see if there's anything git status. So it looks like i didn't save some of the other minor changes here.

37
00:09:35,970 --> 00:09:54,780
So let's do a add period. And. Git commit. And I'll just do a git commit. Amend. I should have put in a minus m to add emerge issue message but i'm just going to save this one.

38
00:09:55,350 --> 00:10:06,520
And I'll quit out of my default editor which is Adam. And that should be added into my last comment and everything looks clean now. So i can move along with my project.


@@@
1
00:00:00,480 --> 00:00:09,720
Some commands are really part of the core and would get up can do but they're so useful that i'd like to leave them here as a bonus before we get into get up.

2
00:00:10,230 --> 00:00:24,000
So the first command that i want to show you is called the git stash. Stashing is a way of putting away code temporarily so that you can work on something else this is the perfect thing to use when maybe your boss comes in and tells you.

3
00:00:24,390 --> 00:00:37,170
That he needs a super important change but you were already working on some new changes on the current branch that you were nc you essentially want to restore everything but you want to not lose any of the changes.

4
00:00:37,530 --> 00:00:52,200
That you've made and this is what it looks like you do a git stash and it will take whatever the changes were and temporarily put them in a storage facility say and then you can take a look at what's been stored.

5
00:00:52,590 --> 00:01:06,730
By using git stash list and there's a couple of ways of retrieving the stash git stash apply allows you to have apply a stash set of changes and git stash pop will actually remove.

6
00:01:06,840 --> 00:01:23,370
The git stash from the list so essentially when you get stash it kind of goes into what is sort of like a deck of cards. You can continue to stash things and any new stashes will be be at the top of that deck of cards.

7
00:01:23,730 --> 00:01:38,280
The top of the deck of cards has an index of zero and the other ones have indexes that are larger. So let's go back into our project. And i do have this preview running from the movie that we did before by using.

8
00:01:38,700 --> 00:01:50,340
That live preview extension. Not what i want to do here is i want to play around with the background colors on this page. So right now the background colors happened to be.

9
00:01:50,790 --> 00:02:04,600
Background dark. And. I have this body class bg darks let's go ahead and change us to. Be g primary and let's go ahead and save that you can see that the bottom part of this thing becomes.

10
00:02:04,740 --> 00:02:16,410
The primary color and b g let's see naf bar darkslide India sbi g dark i want to do b g primary that's all gonna change the t top i do have to do this and all the pages.

11
00:02:16,740 --> 00:02:32,320
So let's go ahead and undo these and I'll just to a search. For b g dark b g. Dark and I'll replace it with. B g primary here. They'll do that everywhere.

12
00:02:35,130 --> 00:03:00,780
So now. I can go to the different pages and notice that. My background. Is always going to be. This blue background so that looks pretty cool but let's say that i wanted to try another color but i wanted to keep this particular change that i have made so let's go ahead and clear this out and i'm going to do he gets stash command to notice actually if you look at the files.

13
00:03:01,110 --> 00:03:14,380
You'll notice that I've modified all of these items right here. So what i can do is issue a git stash command. That's going to return the directory to it's original state.

14
00:03:14,760 --> 00:03:30,820
And. It's going to. Have added something to my stash second issue a git stash list command. You can see that there's only one item. Right now in the stash so i can do a git stash.

15
00:03:31,500 --> 00:03:43,290
Apply. And I'll apply the number zero that's going to bring those changes back. And it's going to sort of not stage the changes is just going to bring them back.

16
00:03:43,680 --> 00:03:55,200
Now if i do want to rewind back so that i can try a different color than i can do a. Good restore. And restore everything back to it's original settings.

17
00:03:55,620 --> 00:04:06,730
Now. Let's clear this out if i take a look at the git stash list you'll see that that item is still there. Let's go ahead and. Try a different color so i'm going to do.

18
00:04:08,100 --> 00:04:20,830
Instead of bg primary i'm going to do b g danger. And I'll replace all of them right. So sometimes i have to hit this button here. And then you can do the replace.

19
00:04:21,270 --> 00:04:36,010
That's going to replace across three files and bg danger looks like this. Let's go ahead and stash this again. So now it rewind back to it's original position and if i do a git stash list.

20
00:04:36,120 --> 00:04:49,360
Now you can see that i have two sets of stashes let's do one more. So. In addition to danger there is an info. And again i have to hit this little button here and then I'll hit replace.

21
00:04:50,310 --> 00:05:05,190
And. Now it brings it. Into this sort of cyan which actually looks pretty good. Right so if i go to the different pages the navigation will always be cyan and get stashes just a quick way of sort of undoing the work that you've done.

22
00:05:05,790 --> 00:05:16,330
That you can sort of put in these different stashes and come back to. Oops i didn't mean to type clear there let's go ahead and clear this down here. Now if i do git stash pop.

23
00:05:19,260 --> 00:05:34,140
It's going to actually need to get restore. Period to get rid of all my changes. Let's try doing navigate stash pop. So because i did a good stash pop what i get is what is.

24
00:05:34,590 --> 00:05:47,340
In the zero position right. The top of the stash so let's take a look. At git stash. List and it looks like i have just one item left so i'm going to say get.

25
00:05:47,790 --> 00:06:00,250
Restore period. And do git stash pop again so pop is going to bring it back to the last item on the stash which was this blue. And if i want to so get status.

26
00:06:00,990 --> 00:06:17,920
I can go ahead and add s so let's take a look right now on the main branch. I can do a git. Add period git commit minus m. And I'll say just change colors to blue backgrounds.

27
00:06:21,210 --> 00:06:44,970
That's great now i have that new commit. That changes the color to that nice blue background. Now there is another little utility command that i want to show you and that is vi get clean command so get clean command is pretty simple it lets you remove all untracked files and directories from your branch see super quickly.

28
00:06:45,480 --> 00:06:59,520
To nice way of removing like old files that you don't need anymore and this is how you use it you can use you a good clean. With the minus n option and that will show you what a good clean would normally do.

29
00:07:00,000 --> 00:07:10,050
Can also add minus d if you want to get rid of directories and so sub-directories and then when you want to actually do a cleaning operation that is not a dry run.

30
00:07:10,410 --> 00:07:22,720
You can use de force command so you can combine a d and f you want to and if you don't want to destroy things you can just select minus n so. Let's go back into our project.

31
00:07:22,890 --> 00:07:36,910
And let's say that we added some some files here so let's go ahead. And i'm just going to add. Another file like this doesn't really need to have anything.

32
00:07:37,110 --> 00:07:49,660
And i know that i could do a git restore but if i have a lot of these files that are untracked. To notice that this one says you right here. If i had a ton of files and folders that were untracked.

33
00:07:49,800 --> 00:08:11,020
Let's go ahead and make a f folder here. And will add another file here. Right just files that are untracked right. So what i could do here is say good clean minus n.

34
00:08:11,070 --> 00:08:28,410
And in this case this is going to move this additional file. Because it is the only file that is not in a folder right. So you could do then get clean minus and then d for directories and n we don't want to do it quite yet.

35
00:08:28,770 --> 00:09:10,600
Now it's telling you that it's going to remove both the additional file n the random folder. So a lot of times when you do a git restore because it doesn't do anything to untracked files it's going to leave those theirs and sometimes need need a perfectly clean folder and for that you can use this get clean command but be careful with it because it can sometimes remove things that you don't wanted to remove that's why it's a good idea to always do the minus an option so that you know exactly what it is going to remove and then you can use v get clean and see what i can do is instead of the n I'll do a d f that'll get rid of directories and files.

36
00:09:10,770 --> 00:09:21,600
And so now when i had returned. Both of those will be gone. So get has a lot of these other utility commands that you're going to learn as you learn more and more about the software.


@@@
1
00:00:00,480 --> 00:00:13,560
Get up is an online service that allows developers to work together. It's sometimes known as a social coding website. Negate hope is essentially a storage service in the cloud where developers can work with each other on code.

2
00:00:14,130 --> 00:00:32,470
Everything you learn about good is still applicable to get hub. Would get hub ads is a collaborative play platform. And that's really just features that allow you to work with others so for example it offers many tools for tracking changes to your site assigning issues to people and deploying your code.

3
00:00:32,550 --> 00:00:44,350
I get home also has a lot of project management tools that lets you manage development projects you can create issues and assign them to the va calpers while organizing your project and a kanban board.

4
00:00:44,460 --> 00:01:14,740
Although get hub has a ton of features there's really only a few things that you need to know. First you'll need to know how to setup a remote and to do this you'll need to create a repository on github and tie your local repository to the remote repository next you lead to learn how to push changes to add your local files to the remote repository and then finally you'll need to learn how to fetch any changes that have happened in the repository and pull those changes onto your local machine.

5
00:01:14,796 --> 00:01:28,090
Let's take a look at how we set up a repository. So i'm going to go to get hub. I'm assuming that you've already opened a good hub account and right now i'm in this repositories section of my account you can see my repositories.

6
00:01:28,350 --> 00:01:43,080
Now in this tab you can click on this new item right here but the quickest way to create a repository is by going to the git hub. Dot new u r l. It does the same thing as clicking on that button.

7
00:01:43,650 --> 00:02:00,040
The options here are to choose a previous template I'll show you how to make one later on and next you can create a name for the repository the name can have letters and numbers as well as either the underscore period or hyphen characters.

8
00:02:00,390 --> 00:02:14,530
Almost all always use lower case but technically you can also have uppercase characters and their other name does need to be unique to your account. You can have two repositories with the same name as long as they are on different accounts.

9
00:02:14,610 --> 00:02:25,920
Now even get a suggestion here. For a repository name so i'm just going to click on that name. As and you can type in something else in here and get will check what you're typing in for you.

10
00:02:26,250 --> 00:02:41,440
So you can actually try to put in wild characters and notice that it's still going to just sort of convert them to. A logical name that it likes. So we'll just leave it with musical spoon you can then add a description.

11
00:02:47,610 --> 00:03:01,110
And also choose whether the repo is a public or a private repo private means that only users that you assign to this report will be able to see it and do things to it let's go ahead and add this as a private repo.

12
00:03:01,680 --> 00:03:16,560
That you can also initialize the repositories with a number of different files. Again add a read me document we've already done that in the local repository and also add the git ignore file which we've also done and also a license as well.

13
00:03:16,950 --> 00:03:29,940
It'll automatically create some for you if you're just quickly using this. Website right here so i'm going to click on create repository. And that'll take you to this quick setup page.

14
00:03:30,390 --> 00:03:47,400
Until you push some content to the repository. It will have these instructions for different ways to set things up but i often begin the repositories on my local directory and then i push things manually and to get hubs if you take a look at these instructions we've all already done a lot of this.

15
00:03:47,760 --> 00:04:05,400
This is creating a new read me document. Then initializing the repo and then adding a read me file. Committing the file and then creating a main branch and these two are the parts that were going to be doing in the next video we're going to add.

16
00:04:05,850 --> 00:04:28,620
A room remote origin and I'll explain what that is and then we'll push. The files that we have locally on to get hub and then you can do other things here so this is actually a shorter way if you do have an existing repository you create the remote add to the repo and then you can add a main branch we've already got a main branch so we wouldn't need to do this.

17
00:04:29,130 --> 00:05:01,930
And then push the repository so really you just need this right here as well as this and that's why i don't like to use these from the website i like to just type them in myself now working with git hub is something that you can do whether you work with teams or not there are benefits to having your project safer early in the cloud so that if something happens to your computer or perhaps if you're working remotely and you just need to get to some code that you've written the code is still safely in the cloud and easy accessible to you or anybody who needs it.


@@@
1
00:00:00,480 --> 00:00:10,710
Let's take our project and work on pushing the code to get up so that we can see what it's capable of but first we're going to discuss some of those commands that we saw earlier on to get her website.

2
00:00:11,100 --> 00:00:34,320
The first was adding remotes. Now the command for this is normally git remote add and then the name that you want to add for the remote and then the u r l where you want to place this file the whether you connect your project to get up is by setting up this remote connection with this get remote command then you need to pass along this name as well as the u r l.

3
00:00:34,650 --> 00:00:51,630
Where you want to host your repo you don't have to host with get help there are other places where you can have posted a lot of times your company will have a place where you need to post your repo and a very common name for the remote that you are using his origin so you may see.

4
00:00:51,960 --> 00:01:00,480
That you're pushing to origin and you're assigning that you are l to the origin names of the you'll have to remember the ural which can be pretty long.

5
00:01:00,840 --> 00:01:15,600
You can add as many remote locations which means that you can push your work to multiple places if you want to so you can add more than one remote and that's sometimes useful if you need to push to a backup file somewhere else as well as.

6
00:01:15,960 --> 00:01:27,310
The remote where your items are hosted. That you can of course remove all or rename the remote with the git remote and to get rename commands you can see the commands here are pretty self explanatory.

7
00:01:27,510 --> 00:01:55,350
So git remote remove and then you say the name that you want to remove and then get rename you just give it the new name as well as the old name in there and then there is an option to list the remotes you can just you actually get remote and it'll just give you the list of all the remotes available or you can also use the git remote minus v option and minus v means verbose it'll just list all the remotes with a bunch of additional information for them.

8
00:01:55,980 --> 00:02:13,920
Or the other command that you have to know is how to push things from your local directory into get hub. That is done with the git push command. Now pushes how you move files from the local machine to get hub and local branches have to be connected to that remote version of the branch.

9
00:02:14,250 --> 00:02:25,080
The first time you post you have to add the minus you option which is the set up stream to opt even so this. Said upstream shrink is the longer version.

10
00:02:25,410 --> 00:02:44,610
Of minus you rate here. And then you put the name of the remote that you want to use and then also the branch that you want to push that you can also issue a good push minus minus all command which i do often that's going to take all your local branches us and push them all to get up which is pretty convenient.

11
00:02:45,030 --> 00:03:00,690
Now sometimes when you try to push a branch get hub will ask you to make the connection manually between the branch that you have on github and the branch that you have locally there's a link between those and so sometimes you have to use this other command.

12
00:03:01,050 --> 00:03:14,130
Called the git branch set upstream to and then you add origin and the name of the remote branch and you'll run into that it'll just tell you whenever it's lost that connection and it'll actually give you the command that you need to use.

13
00:03:14,490 --> 00:03:30,880
Which you can copy and paste and that is pretty convenient so let's go ahead and see if we can connect z used to get hub. The work that we've been doing we're back on this page right here the only thing i really need from this page is the u r l of the remote.

14
00:03:30,930 --> 00:03:48,190
That i need to add the euro down here is the same as the u r l of the repository. With the dot g i t extension so if you ever want to remember the d get your l it's just the same thing as the regular u r l but let's go ahead and copy it from here.

15
00:03:49,830 --> 00:04:00,960
And we'll go back into her project. And i have some open files this one from a previous video that is actually deleted. So let's go ahead and disclose stuff out will leave the read me up.

16
00:04:01,590 --> 00:04:13,720
And i'm going to start issuing some of these commands. So the first thing i need to do is setup my remote so i'm going to issue a git remote. Add on origin.

17
00:04:13,860 --> 00:04:31,060
And then I'll paste the u r l. And then i'm going to use. Git push. And i can just push v origin but then i can also just use git push minus minus all and this will push all the branches now i don't want to show you how branches.

18
00:04:31,140 --> 00:04:38,970
Appear on git hub so i have a couple of branches here this fx headlined branch. As well as the main branch so i'm going to go ahead and push them all.

19
00:04:39,480 --> 00:04:57,030
To get up. And it's going to send them to get hub. Create these two new branches and also create the relationships between the branch that is here locally as well as the branch that will be sent to get helps i remember the other command that you can use if you just want to push the main branch she.

20
00:04:57,390 --> 00:05:08,800
Is get push. Minus you that sets up the upstream link and then you would say origin main if you just want to send one of them. I usually just push everything.

21
00:05:08,850 --> 00:05:18,390
That's just me. So let's go ahead and clear this out and take a look at this page on github we're going to refresh this. Since we've pushed a comment you can see that.

22
00:05:18,750 --> 00:05:38,460
Our documents the read me file license and getting nor that we had locally is already on git hub. And if you click right here you can see that you have multiple branches the two branches that we pushed and you can say i want to view all the branches here and take a look at any of the bras inches that you have.

23
00:05:38,790 --> 00:05:52,180
You can also delete them here. Edit the branch names if you want to and create something called pull requests which we'll get to so i'm going to click back here to go back into my main folder.

24
00:05:52,230 --> 00:06:04,680
And there's all kinds of other information which i want to go to in the next video but pushed that first repository it can be real exciting the first time you do it but get harassed so many options that it can be a little bit daunting.


@@@
1
00:00:00,540 --> 00:00:20,370
Now that we've added the site to get up let's go around and take a look at what you can do inside of git hub we've already taken a look at the branches section you can see that you have this sort of entire sub menu here with all types of things in addition to your regular menu which has your sort of work preferences as.

2
00:00:20,700 --> 00:00:39,070
For your account and your profile and all that stuff. There's all these things right here so let's just kind of go through them. One of the things that you can do with git hub is take a look at different branches which we've looked at and you can delete and edit new branches and you can actually do almost everything that you can do locally.

3
00:00:39,420 --> 00:00:50,550
Inside of get hob so we can take for example this read me file and we can edit it by clicking on it or actually remember that the read me file is sort of your home page.

4
00:00:50,910 --> 00:01:01,830
It's what is being displayed right here. So if we take a look at this button right here you can see that you can actually edit anything in there it's in a special form that called markdown.

5
00:01:02,160 --> 00:01:11,730
Markdown is pretty simple this hashtag right here means that i want to create a headline level one and then you just write out your paragraphs like you normally would.

6
00:01:12,120 --> 00:01:22,140
It does have a preview button right here so you can preview the changes that you're making we're not going to do any changes right now I'll show you how to do pull requests and create changes later on.

7
00:01:22,470 --> 00:01:35,370
Right now we're going to cancel. In addition to being able to just look at your different pieces of code you can actually add a file and normally can do that just by dragging a file into to get up so that's the quickest way of.

8
00:01:35,790 --> 00:01:55,980
Putting something in good health but you can also do that through here. You can upload files or crew create a new files and when you create a new file if you want to you can actually create a directory by adding the directory name first so you would say like sub and then put a slash and that would create the additional directory for you and then you can place.

9
00:01:56,370 --> 00:02:35,130
A name in there someone had cancelled because i don't really want to add anything let's go ahead and leave this alone and then you can add tags. Right now you don't have any tags we can add tags into your projects and the text ridges ways to allow people to find your content if somebody is doing a search for one of your projects so notice that over here we have the about section and where it says a test website for our project if you click right here you'll be able to add a little bit more information one of the things that's pretty useful is that if there is a website for your project you can add it right here.

10
00:02:35,490 --> 00:02:57,030
So a lot of times the repo will be sort of. Some code but you've actually http publisher website on the web so you can put a link to it right here and topics is how you create ways again of people finding you on github if they're doing a search so you can type in here html and then you add a comma whenever you want to add a new tag.

11
00:02:57,390 --> 00:03:09,600
Css comma and java script perhaps. If someone he's looking for that then. You. Can type the tags in here and then you can also choose what items you want to show.

12
00:03:09,990 --> 00:03:23,430
So i'm not really going to be covering releases and packages. So we can maybe take those out and you can sort of customize the way that everything looks and now you can see that this is a little bit shorter and we have these little tags in here.

13
00:03:23,880 --> 00:03:45,750
So in addition to that there's also all kinds of sub tabs so I'll just go through them pretty quickly you're not going to use some of these but some of these are pretty important so first one is issues issues is a you write little notes for yourself or others and these can be sort of like to do items and.

14
00:03:46,110 --> 00:03:56,850
You can create a to do and then assign it to an individual and then that individual can comment on the to do that you've assigned them and it's how you start to collaborate with people.

15
00:03:57,330 --> 00:04:17,400
There's another tab here that's pretty important that we'll get into later when we actually to change our document. Called pull requests pull requests are ways of approving changes that somebody else has made and you can also use this to compare different branches and take a look at what the difference is in between them.

16
00:04:17,820 --> 00:04:35,410
So next up is actions they let you do things like run tests ts or send your code to where it will be hosted automatically. It's sort of a program that you can write to manage your repositories and they can do all kinds of things and you can actually also downloader use.

17
00:04:35,460 --> 00:04:47,370
Actions that other people have built extremely handy but somewhat advanced so not the thing you want to mess around with when you're first getting started a projects is where you can manage the code.

18
00:04:47,790 --> 00:04:57,870
That is being used. You can create something called a kanban board. That is how developer managed their projects so you can create tasks it's sort of like a fancy to do.

19
00:04:58,320 --> 00:05:09,600
That is two dimensional kind of like a excel spreadsheet where you can have two dos and then moving into different columns. It's a really fun way to plan your projects that you may want to look into.

20
00:05:09,960 --> 00:05:21,510
That good hub also gives you a wiki and the wiki is just a simple way to create documentation. That is really easy for people to look at it's sort of like creates like a little website.

21
00:05:21,870 --> 00:05:37,330
It's not very advanced so you don't really also need the wiki. A lot of the documentation could just be done with markdown. In the main project or you can actually just build a website that has the documentation.

22
00:05:37,890 --> 00:05:51,010
Now there's also a section for security which is where you can. Ma manage your policies for security and set things up for what's going to happen when there are problems.

23
00:05:51,120 --> 00:05:59,430
With your code this is a pretty important section but again it's sort of advanced so you don't need to worry about it as you're first learning about git hub itself.

24
00:05:59,880 --> 00:06:11,700
Then there's the insights section this is pretty useful can let you know. The different people who are contributing to this project this is a private project so you will be able to find the contributions.

25
00:06:12,120 --> 00:06:36,600
Of the different people that are working on your. Application and then there's things like trafficked i just created this so there's nothing here but the traffic will let you know now when people come to this repository what they're doing within get up so it's actually quite useful for tracking what's going on and then you can take a look at some of these other ones like how many commits you've done how often people have submitted.

26
00:06:37,050 --> 00:06:51,940
Stuff and then dependency graph will be what tools your project is is using. Etc etc so in addition to that there are also. A whole bunch of other settings under settings.

27
00:06:52,050 --> 00:07:01,470
And this is where you can add for example you can convert this repository to be a template. So that when you create a new repository you can choose this.

28
00:07:01,890 --> 00:07:15,990
As perhaps a a way of creating a simple website. All you need to do is click on template repository and it'll convert it into a template and then. When you go back into your repository you'll see that it's as it's a private template.

29
00:07:16,410 --> 00:07:33,630
Now so back to settings. Let's go ahead and do that because we don't really need it to be a repository this is how you can add an image. That when people copy the u r l to your project it'll show up this image here and then you can also turn off a lot of features over here in the section.

30
00:07:34,050 --> 00:07:46,800
A lot of these other things are pretty. Advanced so i don't really want to cover then you can tap through them if you want to. You can see that there's the place where you can sort of me manage which is your default brands and stuff like that.

31
00:07:47,310 --> 00:07:57,150
The last important thing that i want to show you is this very last link right here. Called get up pages so get her pages is designed to allow you to host.

32
00:07:57,570 --> 00:08:10,800
Your website from a github repository so this is a way. If you have a simple static site like ours you can actually have good hub host your site for free so what you do is you have to choose.

33
00:08:11,160 --> 00:08:25,110
The branch that you want to use and you can. Choose to either have everything at the main level. Of your website so. Instead of putting everything in a folder here like i have this docs folder.

34
00:08:25,530 --> 00:08:40,950
You can just put everything the index dot html at this level and it will then build the website from the root level or you can also. Have everything in a docs folder which is the reason why i call that folder docs.

35
00:08:41,280 --> 00:08:54,510
Because i knew that i was going to. Go ahead and cry create get her pages or use github pages to allow you to display it so i'm gonna go back to choosing main here and then i'm going to use the docs folder and I'll hit save.

36
00:08:55,050 --> 00:09:08,970
And then after you do that you should see a u r l like this. It does take a little bit of time before you can see the results of it to. Get up does have to do a little bit of setup but this is pretty cool once it runs.

37
00:09:09,330 --> 00:09:26,230
You can go to this website now yours will be different and i have added a custom domain to my entire github account. You can also add your own custom domain there is a little bit of setup but yours should be a little bit longer or with the name.

38
00:09:26,310 --> 00:09:38,680
Of the repository at the very end and notice that because this is a private repository. This site will still be public because you do want to be able to look at it on any machine.

39
00:09:38,760 --> 00:09:55,260
And there is also a way to choose a service called jackal. That will let you build web besides a little bit easier but i really like to use get up to create simple websites and let them host a lot of sites for free so for example my personal blog.

40
00:09:55,590 --> 00:10:07,839
Rebel dot org is all hosted for free by get up and i don't even have to worry about how much traffic it gets. They just are very nice about it so. There's so many options in all these settings.


@@@
1
00:00:00,480 --> 00:00:16,150
Get a flow sometimes called git flow is a branch based workflow that is popular when using the combination of get with a tool like git hub. Using get up flow your main branch has the current copy of the code which has never changed directly.

2
00:00:16,230 --> 00:00:30,670
In order to modify the code you start by chicken out a copy of the main branch. This is sometimes called a feature branch in order to make changes and allow others to work on and collaborate on changes.

3
00:00:30,840 --> 00:00:39,390
To work on features you pull the feature branch into your working environment and then make changes which are then committed and pushed back to the feature branch.

4
00:00:39,960 --> 00:00:51,940
Ideally each commit constitutes an isolated and complete change. You continue to commit and push changes until you're ready to ask for feedback or merge the changes into the main branch.

5
00:00:52,260 --> 00:01:09,090
A pull request is a process for moving code from your feature branch back onto the main branch. When you're ready to move things back into them main branch you can request that what you want to do is take the change of made in one branch and combine it or merge it into another branch.

6
00:01:09,660 --> 00:01:18,670
This allows you to request feedback so that others can check and discuss the changes you've made to a feature before it's merged into the main project.

7
00:01:18,990 --> 00:01:34,420
Reviewers can leave feedback comments which you can answer. Plus insert images or code suggestions directly in the pull request sequence. Once the pull request is approved some one will combine this request with the main version of the code.

8
00:01:34,590 --> 00:01:42,660
One of the users with the proper access can start the merge process with the main ranch so that the changes appear in the official version of the code.

9
00:01:43,260 --> 00:01:54,430
Because others may have merged items since you originally made a copy of the main repo you may need to review the differences between the changes you made and what others have done.

10
00:01:54,480 --> 00:02:21,330
Finally once the feature branch has been merged you can delete the feature branch to indicate the process is complete. Let's take a look at a very simple version of this on the project that we've been working on so i'm going to do all this directly on git hub normally you would pull this into a working environment but we can use git hub as it's own working environment so to initiate a change i'm going to click on this edit button right here to edit the read me file while.

11
00:02:21,660 --> 00:02:40,810
Now Alma to do here is just put in an exclamation point and that's going to make a change to the file. So i'm going to hit commit commit this change and i'm going to leave this information as it is but what i'm going to do is to create a new branch instead of modifying.

12
00:02:40,950 --> 00:02:58,050
The main branch so that i can start a pull request and so i'm going to call this. Update. Heading. And i'm going to say proposed changes so what this will do is give you an opportunity to create a pull request.

13
00:02:58,440 --> 00:03:07,950
Notice that it went ahead and checked that the change that you're making is able to be merged so there doesn't appear to be any problems with other things that people may have done.

14
00:03:08,370 --> 00:03:20,640
In the meantime and we're going to hit crew eight pull request to create a pull request now when i'm doing this i can also add and ask other people to review the request that i am making rate here.

15
00:03:21,030 --> 00:03:32,430
I can also add assignees to give it to different people to work. On whatever i'm doing. And also add labels and lots of others stuff here. So i'm not going to.

16
00:03:32,760 --> 00:03:53,970
Do very much here I'll just hit create pull request and this will create a pull request. Now as this request is made you can see that it checked to see that i could merciless back into the main project but it also gives you an opportunity to comment and does discuss things with others so you can say something here like.

17
00:03:54,480 --> 00:04:08,100
I'm going to put the at sign and I'll see pterodactyl. Please take a look at this fantastic. New change. And i'm going to say comment so this will get.

18
00:04:08,550 --> 00:04:20,940
Pterodactyl a notification. As and it will allow us to discuss this project further. Now let's say that we've been discussing this for awhile and we agree that it's a good idea to go ahead and merge this.

19
00:04:21,390 --> 00:04:42,420
Into the main branch so now instead of just having one branch we have two branches this new feature branch. Ready could see that it's called update heading to that's the new branch and we have the original main branch so here i can keep on commenting rack and hit merge pull request and this is going to allow me to confirm that i want to do this.

20
00:04:42,810 --> 00:04:55,320
Someone had confirmed merge. And this will be merging the changes back into my main ranch and now the i have done that. I can hit the delete branch button rate here.

21
00:04:55,680 --> 00:05:05,070
Because whenever you're done with an update or a branch that you've merged into mean it's common to go ahead and delete the branch. So we're going to go ahead and do that.

22
00:05:05,430 --> 00:05:15,330
Pull request has successfully been merged and closed and get her made a note of every one of those. Different parts of this process that I've been working on.

23
00:05:15,990 --> 00:05:32,440
So now if i go back into the code I'll see that my fantastic exclamation point. Has been merged into the main branch. And that's basically what a normal get full process looks like in a very simplified form mm.


@@@
1
00:00:00,480 --> 00:00:12,990
Developers and writers often use a language called markdown to write content. And you'll find that often in many github repos. Let's take a look at the basics of that format and see how it works and how you can use it.

2
00:00:13,680 --> 00:00:26,920
To play with this i'm going to be using this repository in my account i highly suggest that you either create your own re-post story. Or just open an existing repository and we'll play around with this read me file.

3
00:00:27,630 --> 00:00:44,410
Github has a really good built-in editor so we're going to click right here to go into that editor and you'll see that you'll just get the text of the project and then if you hit the preview button you'll be able to see the result right here on the preview.

4
00:00:44,520 --> 00:00:55,470
Cisco back here into edit and review some of the things that you can do with markdown. So there is a syntax for writing headlines and you can create headlines of different levels.

5
00:00:55,800 --> 00:01:13,290
This is going to correspond to html headlines. In html there are six levels of headlines so there's a headline level one headline level two and then so on and so forth until will headline level six and you create the different levels of headlines by adding.

6
00:01:13,650 --> 00:01:23,280
Pound signs or hashtags. Right before the headline that you want to write. There's also an alternative way of writing this and that is by putting an equal sign.

7
00:01:23,640 --> 00:01:35,820
Underneath the headline for a headline level one or a high often underneath a headline level too and you can put in just one but it's usually common to make them fit.

8
00:01:36,180 --> 00:01:47,280
The entire headline like this. So let's take a look at how that works you can see that we already have a headline level one. So if we just press return here and we do too.

9
00:01:47,700 --> 00:02:02,850
We can see a sub headline. And if i hit the preview button you'll see that now you get a sub headline and as i mentioned if you want to he don't need to have the hashtags you should be able to either put in.

10
00:02:03,180 --> 00:02:14,310
Equal signs and you don't need to do. A lot of them if you don't want to and that create also headline level one and also if you want to a headline level two with just.

11
00:02:14,700 --> 00:02:26,950
Hyphens which is pretty cool. And sometimes this is a little more readable i would say. In addition to headlines there's a number of different styles for regular formatting.

12
00:02:27,630 --> 00:02:40,690
So for example you can use two asterisks before and after a word to make that word bold or you can also use underscores. If you just use a single asterisk you can make that word italic.

13
00:02:40,980 --> 00:02:53,910
And this is actually something that is a normal markdown but it is in github markdown. If you put in two till the characters around some text then you'll create some strikethrough text.

14
00:02:54,330 --> 00:03:08,140
If you want to create a block quote or a quotation. You put in a greater than sign with a space right before the words and you can also create horizontal rules or lines by writing three different hyphens.

15
00:03:08,220 --> 00:03:20,380
Three different asterisks or three different underscores. So we'll go back into this project and you'll see that. If i put in. Either three different.

16
00:03:20,640 --> 00:03:32,050
Asterisks and hit the preview button. You could see that i get this line right here. So that's pretty cool if i want to make a word bold. Then i can hit w.

17
00:03:33,270 --> 00:03:44,970
Asterisks here or i can pick another word. And make it italic by either putting one asterisk or an underscore and you can see that it's actually giving you a little bit of a preview.

18
00:03:45,300 --> 00:03:59,440
Directly n the editor for some of these things. So that's pretty convenient. And as i mentioned if you wanted to maybe strike through some text. You can put into till the characters.

19
00:03:59,850 --> 00:04:09,720
And that will create a strikethrough and again it is previewing that for you directly n this built-in editor. Fyodor create a blockquote or equitation you put in a greater than sign.

20
00:04:10,080 --> 00:04:23,860
Alas i getting previewed so we'll hit the prey view button and you could see that this is sort of the quotation format. And you can see the strikethrough here as well as the italics and the bold.

21
00:04:23,970 --> 00:04:47,130
Rate here. If you want to create lists you can use hyphens asterisks or plus signs. And you create one of those for each item on your list you can also create ordered lists by putting in a number like this at the beginning of a line and it doesn't actually matter what the number is it's going to sort of count how many items there are.

22
00:04:47,820 --> 00:04:56,940
And it will make the numbers for you if you want to indent a list then you just add a few spaces like this let's take a look at. How we can do some of that.

23
00:04:57,360 --> 00:05:08,650
Summer to go back into edit here and i'm just going to put in. Item one. And notice that when i had return it actually inserts that same sort of character.

24
00:05:09,060 --> 00:05:28,750
Item too. And as i mentioned. You can also use asterisks. Item one and it remembers what you are typing n. Item. Two. And if you want to indent. You just indented with spaces.

25
00:05:29,550 --> 00:05:46,510
And then when you type in. Another one. It will remember. That indentation automatically which is pretty cool and you can see how it works that out. Another thing that you can do as i mentioned is put n numbers and we can say one.

26
00:05:46,770 --> 00:06:00,640
To. Hear and. Notice that it'll say. One and two and as i mentioned and often times. You'll end up creating a lot of these and then you'll want to sort of switch them around occasionally.

27
00:06:00,780 --> 00:06:11,970
So i tend to just actually typing always number one for all my numbers and when this gets previewed it just count how many there are and automatically number the second one.

28
00:06:12,390 --> 00:06:22,530
Number two slots per pretty handy. Now in terms of links you can create a number of links in different ways. It will automatically convert links like.

29
00:06:22,980 --> 00:06:43,230
H d p or http s. To clickable links you can also manually create a link by putting the link name in brackets and then right next to that adding parentheses for the your l and if inside the u r l you add a space and then something in quotes.

30
00:06:43,650 --> 00:06:58,230
It will make this text into the title of the link. You can also create a link that doesn't have a u r l. N define join the u r l later on so this linked n link right here.

31
00:06:58,620 --> 00:07:20,890
Is tied to this linked n in brackets down here and it will click into this. Link soil sort of look the. Link up. By reference and that's what these are called reference links and then you can put the link later on usually these go like at the bottom of your page some people like that sort of format.

32
00:07:21,030 --> 00:07:33,060
And you can also of course use numbers and double brackets like this so that you're saying that the label. Will be learning the thing that you click on will be learning and then disappointing to.

33
00:07:33,540 --> 00:07:43,710
Item number either one or it can be something other than a number one here but you'll see that notation often. So let's go ahead and try that out a little bit so typically.

34
00:07:44,130 --> 00:07:57,090
If you have a word that you want to link up. Then you just put the brackets around it like this. N then. You can put in like https. Colon slash slash LinkedIn dot com.

35
00:07:57,660 --> 00:08:09,660
And even if you don't put in the. Sort of reference at the beginning. If you type in. A link by itself. It will automatically assume that you want that link.

36
00:08:10,170 --> 00:08:18,540
To be clickable you may have to preview it but you can see how it did the link here and it did the link here. So a lot of pretty interesting ways of creating links.

37
00:08:19,050 --> 00:08:41,370
To create an image is pretty much the same as creating a link with a link reference and then. The link u r l right after words. And so you can just add a exclamation point right before this and you can still use the same sort of notation where you create just a reference and then later on you can.

38
00:08:41,790 --> 00:08:57,490
Put n d link or the u r l to that reference again usually this goes at the bottom if you're using that notation. This last one is how you create an image link and i know it looks really complicated but if you think about about it remember a reference.

39
00:08:57,900 --> 00:09:09,570
Then a parentheses link is how you create a normal reference. Fits an image gets us extra exclamation points so basically. This entire thing right up to here.

40
00:09:09,900 --> 00:09:27,060
It's just how you would create an image. And if we put that inside side eight link reference like a normal link reference. With brackets and then the parentheses you create basically an image link so i'm gonna copy this one and i'm gonna.

41
00:09:27,510 --> 00:09:42,120
Just use it in here so let's go ahead and hit. Edit here. And I'll paste this. And that and hit the preview button and you'll see that it is a an image but the image is actually also a link.

42
00:09:42,480 --> 00:09:53,280
So. That's a really useful one to have. If you want to do some code you can either just put the code and tick marks or you can put the code in. A code block.

43
00:09:53,670 --> 00:10:03,130
So let's go ahead and do that because i can't show it to you in the slides. It doesn't do that very well i'm gonna hit the edit button here. And. I'm going to just add.

44
00:10:03,300 --> 00:10:16,768
I'll go ahead and delete these links and i'm going to go ahead and. Add some tick marks here. Will become. A piece of code. So if we hit preview you can see that it shows like this.

45
00:10:16,878 --> 00:10:28,368
And if i want some more complicated code what i can do is put in three tech marks and that creates a code block and then do that again at the end and then i can use any sort of.

46
00:10:28,818 --> 00:10:44,908
Language here so i can say lad ask somebody who's javascript here. That x equals five and then I'll do console. Log. X. And it will try to guess what this language is so if i hit the preview button.

47
00:10:45,018 --> 00:10:58,308
Let's see actually didn't give you any syntax highlighting or color but it did give you this nice little cop he buttons if you do put code. You can allow people to copy that code by clicking on the slow icon that it gives you.

48
00:10:58,668 --> 00:11:12,078
However if you also put in a language reference years of i c j s. It's going to color coded as if it was javascript and that can be pretty handy. So Martin is a fantastic link which.


@@@
1
00:00:00,510 --> 00:00:11,700
Over time github has added improvements to the main markdown language. So much so that this version of git hub is known as g f m or get help flipper markdown.

2
00:00:12,150 --> 00:00:28,830
Now some of these are going to work anywhere in git hub and some will only work in some places so I'll try to point those out to you. First is the addition of footnotes you may recognize that this is very similar to the references but there is.

3
00:00:29,280 --> 00:00:40,470
A slight difference so you basically add. In brackets and then use the carrot symbol like this and you put in a number and that will point to a footnote note.

4
00:00:40,800 --> 00:00:52,680
Like this at the bottom that has the reference and these display really interesting least let me go ahead. And I'll calm underneath this. Paragraph right here.

5
00:00:53,190 --> 00:01:06,460
And just paste that code so this is just what was in the other page. It's in brackets care of one and then another foot note. Right here and then the references right underneath the notice at the right underneath but when a preview.

6
00:01:06,630 --> 00:01:28,830
You'll see that it'll have. D footnote references right here but if i click on them they actually scroll all the way to the bottom and these references appear after this underline of this horizontal rule and then the referenced thus are numbered and they have a way to get back to the original references of the spatial very long it would.

7
00:01:29,160 --> 00:01:43,570
Then return your back up to this footnote. So that is pretty cool. And. I think kind of useful. That you can just add these wherever you need to i sort of have footnotes in your document.

8
00:01:44,250 --> 00:02:08,130
Now there's also a way to create tables and the weather these works is by creating these pipe characters and then you put in a. Sort of title for your tables kind of like the headings of the tables and then underneath you have another set of pipe characters and the ones on the outside are actually optional so this one and this one.

9
00:02:08,520 --> 00:02:17,460
Are actually optional and the spacing in between here. Is also a little bit optional so notice that i'm just making everything align nicely right here.

10
00:02:18,000 --> 00:02:25,980
But it doesn't really matter if i do that although most of the time time you're going to see that. It's kind of the preferred method to make them look really nice.

11
00:02:26,340 --> 00:02:50,290
Now underneath you get a pipe character and then a number of hyphens and if you want to specify that a certain column should be centered. Then you can put these two columns on the edges and by default everything's going to left the line so if you want to write a line you can put in a colon at the end and then these numbers would all line up so lemme go ahead.

12
00:02:50,370 --> 00:03:04,680
And go into the code and i'm gonna paste. This right here. Right. And we'll hit the preview button and you could see that they display really nice. Noticed that day this one is right aligned so everything aligns to the right.

13
00:03:05,070 --> 00:03:17,250
This center column is centered and xiv first sort of heading section is all bolded. Then every other row is kind of highlighted in a slightly different color.

14
00:03:17,730 --> 00:03:28,050
So that's pretty cool and let me just show you that. The spacing actually doesn't matter so i could just have say two of these to these and nothing has to align.

15
00:03:28,440 --> 00:03:39,820
Exist that it looks a lot nicer if everything is aligned so you'll often see. That people just keep on adding these right here. To make everything look super nice.

16
00:03:40,200 --> 00:04:02,230
Now there is a little a helper for this. Known as a slash commensal sometimes when you type in the slash. You'll get a. Sort of pop up list. Of. Different commands that you can use so to do that we're going to have to go to a pull request and notice that if i do a slash right here I'll get a list.

17
00:04:02,370 --> 00:04:16,320
Have sort of options and you can see here that i can add at the tales section just like i. Showed you before but i can also add a code block and then specify the code say javascript and it gives me that nice little helper.

18
00:04:16,890 --> 00:04:25,860
And i can also do a table and then it'll just going to ask me. How many columns oh and how many rows and it's just going to sort of fill that out for you.

19
00:04:26,250 --> 00:04:40,720
So a nice little hell but it's only available when you are en an issue or a pull request. But tables are so common that just about any other version of markdown even the ones not in git hub have adopted.

20
00:04:40,800 --> 00:04:56,760
That tables for gmat there's also a way to create something called a task list and this is sort of a checklist. The way that you do this is by creating an unordered list and then in brackets either put in an ex for a checked task or.

21
00:04:57,150 --> 00:05:11,100
Put a space in between the brackets for a an unchecked. Sort the box let's just take a look at these and. I can do these actually just here or paste them in this pull request and if hit preview could see.

22
00:05:11,610 --> 00:05:27,330
That it shows these sort of as check boxes. That you can work with in some places depending on where you put these. So when you work with get her Prada next these will be actually checkable and they will be sortable as well so.

23
00:05:27,840 --> 00:05:38,230
That is actually pretty nice i love task lists. There's also way of putting in almost any html in one of the ways that you can use that is by creating a collapsed.

24
00:05:38,400 --> 00:05:52,920
Details section. So if you add this into some code code. Let's go back into our project and I'll go over to. Sort of just a regular page here. And i'm going to paste this and here's the notice it's.

25
00:05:53,250 --> 00:06:05,320
Basically the details tag. Here and here and then a summary section. As well as a header and some body copy here and when it hit PR review that section will be collapsed.

26
00:06:05,640 --> 00:06:17,670
With this title right here and then if i click on this it'll show the header and the body copy so quite useful and i think if you have. You know a page that has a ton of content that's a cool way.

27
00:06:18,060 --> 00:06:28,710
Of making it fit a little bit better and giving people the option to expand and things so there's also another bunch of other additions you can drag and drop.

28
00:06:29,070 --> 00:06:44,040
A bunch of different kinds of documents. Into git hub so you can use any sort of graphic pings. Gifs j pegs etc and notice that you can also drag and drop movies there aren't some size limitation once i think it's.

29
00:06:44,490 --> 00:06:57,010
About fifty megabytes for like audio and video files but look he can even just drag and drop a zip file or a pdf and it's going to upload does and also link to them.

30
00:06:57,150 --> 00:07:14,070
And there's also a way of. Adding hashtags. Hashtags n pull rico quests. As well as issues and discussions will let you refer to another issue and add signs will pulled the names of the people on your project.

31
00:07:14,430 --> 00:07:28,530
So those are pretty useful. N pull requests issues and discussions you can also refer to colors. You can also hit the colon and then type in animoji and if you need to put in something like a slash character.

32
00:07:28,890 --> 00:07:48,310
Then you can escape characters with the backwards slash let's take a look at. Some of those different options. So let's go ahead and come in here. And notice that if i put in a hashtag here it doesn't do anything if i do an Atlanta it's not going to do anything either.

33
00:07:48,360 --> 00:07:59,040
And if i do an image he does if i hit the. Colon character and i start typing something in. It's going to give me a list of emojis and that's pretty cool.

34
00:07:59,610 --> 00:08:13,780
Even in this kind of editor. Knife i go over into sort of the pull request. Version of this this is going to be a little more flexible so if i say at it's going to list the people on the project.

35
00:08:13,920 --> 00:08:26,440
Right if i hit the hashtag it's going to look at all the issues or the pull requests that are currently open and let me refer to those as well and if i type in.

36
00:08:26,520 --> 00:08:43,900
A hexadecimal color so let's say f a b c d e here. Fi type it into these tick marks which will be a code block they actually display. As code but also with a preview of the color which is sort of useful.

37
00:08:44,010 --> 00:08:54,450
As and if i hit the. Colon here you could see that it actually immediately refers to. The list of images and i can type in something else here. To get.

38
00:08:55,020 --> 00:09:10,330
You know sort of the image he. Referring to that tax. Which is also pretty cool. There is also a way of doing differ st alerts again these only work. In pull requests and discussions.

39
00:09:10,800 --> 00:09:20,920
And issues but they're pretty neat. So if i come over here into this pull request i'm just going to PC so basically. It's like a blockquote with a bracket.

40
00:09:21,270 --> 00:09:33,400
And then you can have notes. Imp Portland or warning sort of symbols and when i hit preview you can see that they get these different colors. Which are pre nice way of creating.

41
00:09:33,660 --> 00:09:48,910
A little bit of enhancement to your pull request issues and discussions. There are even ways of using mermaid grabs. So you can actually do mermaid and there is a number of others.

42
00:09:49,050 --> 00:10:00,840
Sort of formats that you can use so let me show you how that works. Some mermaid is a sort of syntax for creating. A simple charts is what i would call it some of the pieces in here.

43
00:10:01,440 --> 00:10:13,952
And let's see we will hit the preview button and. It gives you like a nice little interface. And you can seek kind of a flowchart. So this is like a flow chart format.

44
00:10:14,282 --> 00:10:28,112
There's also a way of doing maps and a few other things. You can look at the documentation for. Some of these different format. This is way too complex for me to discuss those format and how you use them but you can look them up.

45
00:10:28,862 --> 00:10:43,712
And they're pretty awesome. There's also some. Html that you can't use so if you type in any of these. For obvious reasons into a document into like a markdown document it's going to.

46
00:10:44,132 --> 00:10:56,622
Sort of not let you put these because obviously you don't want to do like an i frame or and and bad and just kind of let people add content. Into you know your github project.

47
00:10:56,702 --> 00:11:09,642
Without permit ocean so you don't you know you can't do like stylesheets for example. I dunno i think it'd be sort of cool if you could do like a input field maybe they'll add that at some point but for now i mean these are quite capable additions.


@@@
1
00:00:00,510 --> 00:00:23,160
There are a number of important files that are a great idea to add to your repos so let's take a look at some of them. The first you've already seen is the read me file that tells people what the project does and why it's useful when you go to a repository it's the file that shows up automatically when you are in the main level of the repo it's sort of like the repos home page.

2
00:00:23,580 --> 00:00:32,670
The read me file can be either in the main folder which is also known as the root of the repo but it can also go in the docs folder or in a special hidden.

3
00:00:33,000 --> 00:00:44,680
Dot get help folder and the nice thing about that is that it just makes your code look a lot cleaner. If it's not something that you see on the homepage especially when you add a lot of these different files.

4
00:00:44,730 --> 00:00:55,120
Now some of these will get an extension i think in the read me file. The extension is optional but i like to put it because it does help with the syntax highlighting.

5
00:00:55,170 --> 00:01:05,190
You'll also get a table of contents when you have a lot of headings in the read me document and also each one of those headings will have a link to your content so if we can take a look at.

6
00:01:05,640 --> 00:01:24,970
This website rate here. We can see that there is now a table of contents and has a couple of headings fight come over here he could see that i can click right there to go to that link and the u r l now has that in it so if you have a long document you can send people directly to a section by using this link.

7
00:01:25,290 --> 00:01:40,170
Notice that it also appears in a tab along with some of these other files that are going to be available. This one already has the license in it so you can see that it shows up but the read me file will also have a table of contents over here if you have more.

8
00:01:40,560 --> 00:02:01,620
Than then one headline and it'll show sub headlines as well. The license is another special file. Public repositories are normally used to share open source software but for it to really count you need to define how developers can use change and distribute the software and for that you need lie license file.

9
00:02:02,250 --> 00:02:13,300
There are many types of licenses and get her behalf some templates or helpers that you can use. When you create a repo or when you click on the tab that shows you the license.

10
00:02:13,470 --> 00:02:27,430
Now on top of the read me is where i showed you. That section. Where you see the mit license i didn't have a license. It would have a button right here to allow you to see the options.

11
00:02:27,630 --> 00:02:40,800
Of the licenses you can also see something like that when you create a new repository. If you scroll to the license section you can see that there's a dropdown here with a bunch of sample licenses and there's a little bit of a filter there.

12
00:02:41,190 --> 00:03:08,680
Is if you want to find a specific license. License file can be also n d dot m d format. Also dot t x t n dot r s t it also is optional so you don't need an extension and you'll commonly just see it named as the license file now this one has to be in the root folder you can't put it somewhere else it needs to be right there at the top of your repository.

13
00:03:09,180 --> 00:03:24,990
There is also another file called the code of conduct. This special file establishes the expectations. As to how people are supposed to behave when they're using your projects like with the license there's a bunch of built in help hers.

14
00:03:25,500 --> 00:03:41,100
So we can take a look at that in a repo. If we go to the code of conduct you can add one right here and Elisa can see there's a couple of little helpers here with some templates and you can also add to this form and I'll update.

15
00:03:41,490 --> 00:03:58,110
This section on the other side. There's also a security policy that you can add. Call the security md file. This one let's you of course specify your security support and where to report vulnerabilities.

16
00:03:58,800 --> 00:04:08,910
And you can find this like i said along the tab on top of the read me and it does have a few templates that can show you how to get started writing one.

17
00:04:09,660 --> 00:04:25,200
This one can be in the docs or the route or in the getup folder so if we come over here we'll go back. And go back to our page. You can see the security policies right here and you can hit add a security policy.

18
00:04:25,740 --> 00:04:35,880
And then notice that it actually takes you to the repo security tab and then from here you can start this setup and go through the process of basically.

19
00:04:36,210 --> 00:04:55,960
Modifying this file to tell people how to use. The project and what the security features of this project are. There's also a really important file called the contributing dot m d file basically you let people know some guidelines as to how they can contribute to the project.

20
00:04:56,040 --> 00:05:09,550
Sometimes you put things in here like the sort of contributions that you accept or when you don't accept certain contributions and you can include this things like steps for creating good issues and links to documentation.

21
00:05:09,900 --> 00:05:21,510
Like some of the other files you can put this in the root folder the docs folder or the dot get up folder as well and if you go to the issue sidebar you should be able to see a link to this just to make it easier.

22
00:05:21,840 --> 00:05:36,250
For people to find how to contribute to a project btw. There's another file called the support dot m d and that is also useful for when you want to tell people how to get support for your project.

23
00:05:36,330 --> 00:05:48,540
It's going to be placed either in the root folder docs forget hub like some of these other files and also appear in the issues sidebar because that's usually a good place for people to look for help.

24
00:05:49,110 --> 00:05:59,350
Others another super special file called a code owners document. This one basically has information about who is responsible for certain code in a repository.

25
00:05:59,700 --> 00:06:12,060
This is just a text file it doesn't get an extension and you can add whomever you want whatever accounts you want basically but whoever you add in there has to have write permissions to the project or they're not going to be able to do very much.

26
00:06:12,510 --> 00:06:28,230
Now these folks would get automatic notifications whenever something happens. So they would be automatically asked to review. Pull requests and also just review the code as it is entered so it's kind of.

27
00:06:28,680 --> 00:06:52,210
A automation feature that makes it easier for you to. Default to a specific person or group. You can have one of these files and make the files different depending on the branch of course when you sort of clone a branch based on another branch it's going to copy that file but you cannot fire on a branch by branch basis and another father can go n any of these folders.

28
00:06:52,770 --> 00:07:10,479
Now there's a format for code owners that is pretty similar to what you see in the git ignore file. So basically you add n some sort of pattern so this would basically say that all the javascript documents or the documents with a javascript extension.

29
00:07:10,590 --> 00:07:24,450
Are assigned to planet of the webs when a pull request containing those would you can do. Any sort of glob patterns for like this would mean that any folder with any file that has a javascript extension would work like that.

30
00:07:24,840 --> 00:07:41,190
When you add a slashed docs here here it means that you want the entire folder and then you can have it. Belong to. These two people who will be responsible for any pull requests so basically you create a pattern and then you have one or more ids.

31
00:07:41,520 --> 00:07:54,100
Separated by spaces. The ids can actually be a username or some send email that is listed in their account. And you can also add an entire team in an organization.

32
00:07:54,510 --> 00:08:05,250
If you want so it's quite flexible and it's really useful just to make it easier to have specific people. That you will have checked or verify or review the code.


@@@
1
00:00:00,360 --> 00:00:11,340
Pull requests is how users ask for changes to be made on the main site. That you can do them directly on git hub when you want to make some minor changes to your project so let's take a look at how that's done.

2
00:00:11,850 --> 00:00:24,840
So here's her project and i'm going to go into the docs folder. And then take a look at my index html file. A and what i want to do is maybe change the title of this webpage because.

3
00:00:25,230 --> 00:00:35,860
It's really something i copied from another project and it's called layout. So maybe on this first page i'm going to change this name right here so to do that i can just hit this edit button.

4
00:00:36,030 --> 00:00:45,720
Right now and that will bring me into a very simple editor notice that it's all syntax highlighted it's got line number it's actually a pretty cool editor.

5
00:00:46,260 --> 00:01:02,890
And so. I'm going to change the layout. Title to learning. Get an git hub. Which is titled for this project. And then you can hit preview to preview the changes this will show you what you have modified in a nice little interface.

6
00:01:03,180 --> 00:01:18,700
And then we can commit these changes just like we would. On our local website and I'll add here node. And you can also add a little bit of an extended description is optional summer leave it blank.

7
00:01:18,870 --> 00:01:34,830
Here can decide which email i'm doing this from. And here you can also choose just like you can in the local version of this to commit to the main branch or cre ate a new branch and this will generate what's called a pull request now here i can give this branch name.

8
00:01:35,310 --> 00:01:48,000
Title change. And i'm going to hate propose changes. Alright so now. What it's doing is opening up what's called a pull request. This is how if you or somebody else.

9
00:01:48,390 --> 00:02:01,920
Or even if it's yourself you can open up a request to make changes to this website based on the two different branches that we have the original branch and the one i just created and you don't really need to do much here all you can do is he is either.

10
00:02:02,370 --> 00:02:18,510
Hit change title and create this pull requests let's go ahead and hit that. Now creates a request that just seems like a long way to go to just create a change but what it's doing here is.

11
00:02:18,840 --> 00:02:36,060
Creating this pull request and it's given a number because you can have many of these and then it sort of defined a conversation about the project. Now this can remain open and you can sort of make notes to ask people typing a note here hey.

12
00:02:36,570 --> 00:02:51,540
What do you think of this if i was talking to other people. Of this title change. And just continue to hit common common comment. As and allow people to comment on what you're trying to do here.

13
00:02:52,050 --> 00:03:01,170
And then other people can come in here and make their comments about whether or not this should be changed. Once you are done with this though you want to merge.

14
00:03:01,500 --> 00:03:14,880
The pull request. In so all we need to do here is click on this merge pull request and now i need to do one more thing which is confirm the merge. Right so i'm going to click on confirm the merge.

15
00:03:15,390 --> 00:03:30,840
And that is now successfully merged the request and closed this. Pull request so that's a long process but it's how you do things on github notice there's all kinds of project management things.

16
00:03:31,230 --> 00:03:40,500
On the right hand side that you can do in addition to this you can add. Assignees right now there's only one person in the team but if you have additional people.

17
00:03:40,980 --> 00:03:52,450
Then. You could assign somebody to review the change that has been proposed you can also add labels so there's the typical labels that you can add to perhaps.

18
00:03:52,500 --> 00:04:09,750
A proposed pull request so you can ask for help on a specific topic. This doesn't seem right and put any of these labels those are kind of useless because you can then look for or sort by these different labels you can also create milestones milestones are a a way of.

19
00:04:10,140 --> 00:04:32,850
Letting you define targets that you want to reach with your code. So another product management thing that you do and get hub and then also. You can align the pull request with an issue so i did show you issues before you can create an issue and say hey we need to fix the tie title for this project and then when somebody goes in and changes the title.

20
00:04:33,180 --> 00:04:44,430
Then the pull request can automatically be linked to the issue and close the issue when it gets done. Now notice that there's also this commits section here.

21
00:04:44,760 --> 00:05:09,990
Which shows you what you've done and you can take a look at the file while that you modified and what's nice here is that it also gives you. A view that shows you what you have changed we made very simple changes on this project but this could be several files that were changed and this is actually pretty cool because if somebody is looking at the proposed pull request.

22
00:05:10,350 --> 00:05:20,220
They can very easily see the different files that have been changed and say yeah this is a good change based on the files that i see right here and approve that pull request.

23
00:05:20,580 --> 00:05:36,250
Now if we take a look at. It see. The code. And we take a look at our index html file. We should see our new title right here and if we go back into settings.

24
00:05:36,450 --> 00:05:57,150
And we go to pages. We should be able to take a look at the website now. And it is going to take a little bit of time for that change to take. So it's not loading the new version of the website but here i reloaded my page and now you can see that it has the new title.

25
00:05:57,480 --> 00:06:12,330
Right here which is great and that's how you do a pull request it is one of the core skills that you'll need to do develop. Not just an accepting a pull request and approving it but in really having those conversations.

26
00:06:12,720 --> 00:06:25,960
With your other users about proposed pull requests. And also any changes and making assignments to people on what they need to do based on either issues or depaul request.


@@@
1
00:00:00,510 --> 00:00:15,270
Pull requests are part of good flow and they're probably the main reason that github exists the ability to communicate with others about your code. Is what makes get social and get hub does it in a fantastic way let's take a look at some of the options here.

2
00:00:15,840 --> 00:00:32,940
When you first create a pull request you're going to have the option of taking a look at. How your code look before the pull request. N after the changes that your suggestion so there is a mechanism for comparing branches and they don't have to be those particular two branches you can also compare things.

3
00:00:33,300 --> 00:00:43,240
With some additional branches you may have and that means that you can be more flexible about about what you're seeing so let's take a look at how that works.

4
00:00:44,700 --> 00:01:07,680
Here i have a project and have already pushed some changes some of the click right here to compare and pull request. And from the very top you can see that i can write down some notes about what i'm doing here and it says that it's able to merge these two branches so there's not a problem between those two branches but notice that i can immediately come over are here and if i had some other branches i could compare.

5
00:01:08,010 --> 00:01:24,640
My branch with the changes with perhaps some previous branch or another branch that perhaps was happening at the same time. Meltdown here towards the bottom you can see all the changes that you have made in between those two branches.

6
00:01:24,720 --> 00:01:36,960
N there is a lot of options here. For you to take a look at the file or copy the reference and even view the entire file that you're comparing rate here.

7
00:01:37,410 --> 00:01:49,270
In really take a look at what's going on with your project. Normally you create a regular pull request but there is an option to create something called a draft pull request.

8
00:01:49,830 --> 00:02:02,550
Now this is meant as a placeholder for your work in progress before you're ready to let somebody review things. So you can continue to work with the draft pull request until all your commit i have been done.

9
00:02:03,060 --> 00:02:23,700
And you're ready for somebody to take a look at them at this point you can continue with your discussions and anybody else can also comment on what you're trying to do perhaps this is a way to announce your intention let other comment on what you're planning on doing but not really allow for reviews because we haven't finished your work yet.

10
00:02:24,060 --> 00:02:41,430
So let's take a look at that. So here you can see that i am able to merge and right now i have the draft pull request just because I've been doing it for awhile but traditionally you can just create a normal pull request here.

11
00:02:41,850 --> 00:02:54,720
If you want to switch that you click on this little triangle and you can select. A draft poll equality can see that it says cannot be merged. Until marked ready for review so that's going to be an extra little checkbox that we have to check right here.

12
00:02:55,170 --> 00:03:09,130
Notice that i need to market ready for review before i can merge it there's no way of merging. This right now. So we can assign some additional people here and I'll go ahead add and add Joe Joe as well as Terry.

13
00:03:09,210 --> 00:03:24,880
And now we can start some conversations about what is happening. Here so let's go ahead and say something like. Hello team. I am thinking. About updating to bootstrap five.

14
00:03:28,080 --> 00:03:41,890
What do you think. And I'll just say comment here. And now other people can go ahead and comment on this. And i can see that somebody already hearted my idea.

15
00:03:43,170 --> 00:04:00,850
And i can also see that jojo wrote a comment for this which is great. So i'm feeling pretty good about this my changes are looking great. We have. Gotten some feedback from our team and so i'm going to go ahead and Mark this as being ready for review.

16
00:04:02,730 --> 00:04:13,140
It's ready for review so now i'm going to request that Georgia review this file. And now Julio will get a notification that this has been assigned to her.

17
00:04:13,800 --> 00:04:24,450
And. The review process can start. There's a number of different tabs and the pull request sections where you can follow along with what's happening with the project.

18
00:04:24,840 --> 00:04:33,600
Now by default when you come here you'll see the conversation time which are where discussions can take place with the folks that are working on the project.

19
00:04:33,990 --> 00:04:43,770
You can also look at a commits tab that way you can see the commit history for this pull request. There is also a check stop that lets you use tools like git guard.

20
00:04:44,190 --> 00:04:57,820
That let you run security checks on your code. And also there is a tab for looking at file changes. This is just some additional ways to take a look at the project so when we come over here.

21
00:04:58,980 --> 00:05:12,270
Notice that the tabs are right at the top and so i can take a look at the commits that have been done for. This pull request and take a look at checks and if i have tools installed like get guardian i can run.

22
00:05:12,720 --> 00:05:29,500
A check to make sure that my security sort of features have been verified. This would be for things like making sure that nobody put in a secret in one of your files and then over here i can take a look at the three files that were changed.

23
00:05:29,730 --> 00:05:43,210
And if i want to i can initiate a review for this project and i can review files directly n here here or just write in some individual reviews that are basically comments.

24
00:05:43,440 --> 00:05:58,930
Now because i am not de assigned reviewer i can't approve this. Pull request only another reviewer. Can actually approve this before i can submit it. So it will let jojo take care of this.

25
00:05:59,430 --> 00:06:14,160
As a here is Joe Joe's view right now. And i can take a look at the files changed to take a look at the code that has been written and this is a pretty flexible sort of interface that lets you look at the code.

26
00:06:14,580 --> 00:06:28,530
So i can take a look at the different files and make general notes about things that i see when i point out a couple of things here that are pretty good i'm going to go to the index html file and show you that if i scroll all the way down to the bottom.

27
00:06:28,950 --> 00:06:45,270
I can see that i have sort of the. Changing of the script from bootstrap four point six. The bootstrap five point three that looks pre the good but as i'm looking through here i can see that there's another scrip rate here and i'd like to see what that is.

28
00:06:45,780 --> 00:07:03,960
And so i'm gonna open this opera expand this up so this right here is a pretty comprehensive little editor it's not as good as something like code spaces or visual studio code but you'll also have the option of of reviewing this in visual studio code if you want to by hitting this review code space button.

29
00:07:04,380 --> 00:07:16,590
Now from here i'm going to notice that so i expanded all this will go all the way down to the bottom and i'm noticing that this script. For j query is actually being used here and.

30
00:07:16,980 --> 00:07:26,550
You know you don't really need j query will your upgrade to bootstrap five so jojo is going to make a comment about that i'm going to hit this low plus sign right here.

31
00:07:27,180 --> 00:07:52,300
So now i can make a comment. And I'll say. Looks like you left. D. J query code. You can. Safely remove that and all files. Alright so i can add a single comment n or start the review i'm gonna go ahead and started and say hey you can safely remove that and all files.

32
00:07:52,620 --> 00:08:05,370
And i can go through this project and. To take a look at any other code that i want to see. Or now that I've started the review i can go ahead and finish it i'm going to go ahead and make that same note.

33
00:08:05,850 --> 00:08:15,840
In other places so i know that i. Need to check. The bottom so actually the columns is the one that i did at first on. So i'm going to go ahead and come over here.

34
00:08:16,410 --> 00:08:26,310
And it looks like it's actually putting it anywhere everywhere so that's kind of cool. So that's going to be the extent of my review i don't need to get very complicated for this.

35
00:08:26,730 --> 00:08:44,680
Demo right now and then from here. I can finish up my review and say. This needs a bit of an update. To remove j query. And let's go ahead and here we're instead of approving the review we're going to request.

36
00:08:44,880 --> 00:09:07,260
That these changes are made. And I'll hit submit review. And that as you can see saves a history of what I've done and the review that has. Been done and now somebody can continue those changes that were requested which would be removing this.

37
00:09:07,650 --> 00:09:17,200
Extra code that we don't need any more so that's how i do reviews. You can also of course approve it and this wouldn't be able to be merged until it was approved.


@@@
1
00:00:00,570 --> 00:00:10,090
Let's take a look at how we may resolve some of these changes that we need to make to this project right here. So if i go to a conversation i can see all of the notes.

2
00:00:10,170 --> 00:00:23,280
That jojo made. In the review and here's where she added that i left the j query code and i can remove that and all the files. Now if i go back to files changed you'll see that.

3
00:00:23,790 --> 00:00:34,260
If i want to i can do a lot in this document so i could perhaps go ahead and edit the file or view this file but this will be a little bit easier to do n a code space.

4
00:00:34,650 --> 00:00:46,050
So i'm gonna go ahead and hit review and code space. Nah i already have a code space that i created earlier to make the original change but i can also just create a new one right here.

5
00:00:46,380 --> 00:01:00,870
I'm going to go ahead and hit resume this code space since I've already got it going. It's in the right branch and everything is looking good. I to let's take a look at how we can modify the project.

6
00:01:01,200 --> 00:01:20,350
You could see that under comments now we are actually able to see the comments that were created. N our project and it'll even take us to where we need to be making that change and i can also hit the resolve conversation here let's go ahead and the Lee j query from here.

7
00:01:20,640 --> 00:01:28,320
And i know that i also want to do that in all the other places i thought that note. Showed up everywhere but it looks like it just shows up in one place.

8
00:01:28,800 --> 00:01:44,190
Which kind of makes more sense so let's go down the le dis. J query line rate here. Then i'm going to delete this extra line. And then i can go to the conversation.

9
00:01:44,880 --> 00:02:03,700
To think was in this media n i'm going to say. That's. A great catch. I went ahead and. Fixed it. Alright well i'm going to go ahead and. Resolve this conversation.

10
00:02:04,170 --> 00:02:18,600
And then. I'll add this comment in there. So now that is marked as resolved but I'll need to go ahead and push this update someone to go here to the source control panel.

11
00:02:19,170 --> 00:02:39,730
And commit these changes. An opening a message here. Or it'll closest out and then I'll hit the sync button right here. And I'll see yes. Now this will sink my local copy with the repository.

12
00:02:40,200 --> 00:02:58,890
So i can com rate here. And take a look at the conversation now. I should be able to see my additional. Notes. Rate here. Updated to remove j query. And that is fantastic now.

13
00:02:59,520 --> 00:03:13,290
So what i can do is go ahead and already did this. Change so let's see. Let's go ahead and dismiss this review because already made this. Already dismissing this.

14
00:03:13,860 --> 00:03:35,250
Change. Taken. Care of. And if i want to i can go ahead and merge this pull request. And confirm the merge. Yeah that should be it now this project is up to date.


@@@
1
00:00:00,510 --> 00:00:15,270
Let's take a look at how we can secure our files a little bit better. So i'm going to start off by creating a code owners document here. I remember that in order to use a coroner's file your repo needs to be public or you need to have a pro account.

2
00:00:15,630 --> 00:00:26,260
I'm in the main branch and i'm going to hit create new file I'll call this code one owners. N and here i'm going to type in that i want to pretty much.

3
00:00:26,310 --> 00:00:39,220
Take all files and all directories n assign them to Joe Joe. Humphrys. So she is going to be the owner of this file I'll go ahead and commit this straight to the main branch.

4
00:00:42,210 --> 00:00:55,980
And what this does is make jojo Humphreys the owner and she's going to get notifications. Whenever i do things with this site. Now noticing that you can do is in settings you can protect your branch.

5
00:00:56,340 --> 00:01:12,330
By going to branches and i'm gonna hit add protection rule. There is a number of options here but what i can do is say. That i want. The main branch to be protected and i can fill out all kinds of options here.

6
00:01:12,690 --> 00:01:27,270
So i'm just going to do a simple one require a pull request before merging. And i'm going to say that i want an approval before merging anything in this branch as well.

7
00:01:27,660 --> 00:01:39,340
So i'm going to say create a mascot for your authentication code. So now i have a branch protection rule and my b branch will not be able to be re eaten too.

8
00:01:39,390 --> 00:01:55,080
Unless it's been approved summit to go back into code and now that i have all that i'm going to go ahead and make some changes into my project. Someone come over here and create a new code base.

9
00:01:55,680 --> 00:02:04,540
I've cleared out some of the old ones that I've been working on so I'll just hit this button right here and this will pull up a code base. With all my files.

10
00:02:04,920 --> 00:02:18,100
And i'm gonna go ahead and begin a new branch. And when i want to go is go to each of these documents and remove these links. To font awesome on every one of these files.

11
00:02:18,270 --> 00:02:30,990
Since i realize that i don't use icons in this project right now. The simpler version of a larger project so there's no reason for those any more. So got those changes queued up i'm going to.

12
00:02:31,500 --> 00:03:02,650
Go ahead n atom. And I'll go ahead and push this. I need to go ahead and set the upstream branch here. So now this is in a fix icons branch. And. I can go ahead and star a pull request here.

13
00:03:04,530 --> 00:03:19,030
Alright so i'm going to go ahead and try to just create a pull request. For this. Now notice that automatically. Joe Joe humphries became a reviewer because of my code owners file.

14
00:03:22,500 --> 00:03:45,580
Alright so we'll create a pull request. And notice that it already says that a review is required and also that merging is being blocked. Because it has to be reviewed by someone so that's the advantage of doing a code owners as well as branch protection.

15
00:03:45,720 --> 00:04:02,370
Is it sets up the standards for how people are supposed to work. With this project. To hear 'em on Joe Joe Humphreys account you can see the icon for her right here and you can see that in this notification section.

16
00:04:02,790 --> 00:04:18,010
I should have gotten a notification about this fixed ico cons and how a review is automatically already requested. So i'm going to go into this and. Take a look at the files on it take a look at these files changed.

17
00:04:18,150 --> 00:04:32,040
And here i can go ahead and look at. The changes that were made these changes look pretty good. So this will be PR really simple i'm going to. Hit review tejas i don't need to review it in code spaces.

18
00:04:32,430 --> 00:04:50,760
This simple deletion is something i can just. Go ahead and approve so here. I can leave a comment. This is a great. Idea. Looks like you got. Mall. Came in here i can either.

19
00:04:51,270 --> 00:05:03,610
Do a comment or just approve this so that. The project can move on and then i can hit the submit review so. I'm gonna go ahead and approve this. And submit this review.

20
00:05:03,810 --> 00:05:20,820
And so now the parameters for this project have been. Taken care of. You know it required one review. It sent Joe Joe Humphreys automatically as the reviewer and it's able to pass all the checks and since this branch has no conflicts.

21
00:05:21,180 --> 00:05:35,220
With the base branch i can go ahead and merge. This pull request and i can either do that from jojo's account or if i want to i can just. Do it from. My account now that all these changes have been approved second now.

22
00:05:35,580 --> 00:05:50,680
Merging pull requests confirmed the merge. And we're good to go. So we'll go ahead and delete this branch. And now our update has been done so all those different options.

23
00:05:50,910 --> 00:06:04,240
N get help give you the ability to really protect. How your projects are working and how you work with other people to accomplish reviews and also take care of any updates to your website.


@@@
1
00:00:00,600 --> 00:00:08,820
Get up provides a lot of tools to help you manage projects let's take a look at how they work. Now here's some of the tools available to help you organize things.

2
00:00:09,150 --> 00:00:19,050
The first is contributors you can invite others to work alongside you on a project. That's what really makes git hub special the ability to collaborate with other people.

3
00:00:19,590 --> 00:00:37,110
Issues as allows you to create notes about your project that can be shared and commented by others. They're usually for things that you need to fix. There's a couple of ways that you can organize issues one is with labels that help you identify the purpose of the issue and you can add more than one label if you need to.

4
00:00:37,650 --> 00:00:49,930
Milestones is for grouping issues into goal those that need to be achieved. Finally projects are away to take a look at the progress of your work and see how well you are accomplishing things.

5
00:00:50,340 --> 00:01:00,870
Let's go ahead and use these really quick this is going to be just an introduction to how these things work you can take a look at some of our project management courses forget hub for a deeper dive.

6
00:01:01,230 --> 00:01:13,320
Here i am and the settings tab for my project. And the first thing i want to look at his collaborators whenever you want others to be able to work with you on a project you'll need to add them as collaborators.

7
00:01:13,980 --> 00:01:37,350
Or this will work if your project is a public project or a public repo or if you have a pro account mt. Here you can add people I've got two people already on this project jojo Humphreys and pterodactyl but if you want to add some more people you can hit this button and then type in either the username or the email or the full name and they should appear right here on a list.

8
00:01:37,680 --> 00:01:50,680
They'll get an email notification and then there'll be able to do so something with your project. Now i usually create issues whenever i want to do something or want to address something with a repository.

9
00:01:51,090 --> 00:02:12,480
That needs to be looked at by others so i'm gonna create a new issue here. And in here i'm going to give this a title. And i'm just going to say. Please check my work so far here and here in the right hand side is where i can assign others to the project notice that i can also sign myself.

10
00:02:12,810 --> 00:02:28,860
I'm going to assign jojo humphrys to this task and if i want to i can add additional people just by clicking on this right here. Now you can also add labels the soldiers have set of predefined labels in here or you can hit edit labels and add some more.

11
00:02:29,340 --> 00:02:39,010
I'm going to select the help wanted label but just like with assignees i can also. Add multiple labels and there's a nice little filter section of here.

12
00:02:39,450 --> 00:03:02,110
Now we don't have a project set for this but you can also assign this to a project that you've got going on and if you want to you can also assign a milestone so there's already one rate here and muscles are just a way for basically sort of establishing points that you want to use on your projects here under milestones.

13
00:03:02,595 --> 00:03:19,140
I i can either type in something so. Getting started. And adhere i can hit create and assign to a new milestone. Or if i want to i can choose one of the existing milestones i'm gonna go ahead and select final review here.

14
00:03:19,560 --> 00:03:35,860
As the milestone and it gives me this nice bar. That will take take into account a the amount of issues that are completed towards this milestone we don't have any issues yet and that's why it's showing one hundred percent and there are some other things that you can do right here but i'm just going to go ahead and submit this new issue.

15
00:03:37,230 --> 00:03:53,670
Rent and every time i do something with issues so whenever i modify something safe i assign another. Assignee to this issue it's going to track that and add add to this list right here so once it gets updated you'll see that now it assign.

16
00:03:54,090 --> 00:04:05,430
Pterodactyl and if i undo that. You will see that eight will assign that as an event right after that so what keeps on updating live which is pretty cool.

17
00:04:05,970 --> 00:04:20,610
And there's a lot of other things that i could do here so i can also leave a comment. I'm so i'm going to go ahead and switch over to. Pretend like i'm Joe Joe humphries and i'm going to go into the issues tab now I'll notice that there is.

18
00:04:20,970 --> 00:04:32,410
A section here for the take a look at my work so far and i should have gotten a notification. That talks about that as well so i can go to that notification and.

19
00:04:32,820 --> 00:04:46,720
I'll just say. Hey ray and i can even put in an ad sign and type in planet of the web here. Select it from the dropdown menu. And I'll just say I'll. Take a look.

20
00:04:47,670 --> 00:04:59,130
And i'm going to comment and that will show up as a comment. So we can talk about the things that we find here. If i went to the i can create another issue so I've noticed that.

21
00:04:59,550 --> 00:05:13,570
In this code section in this read me file this good says get harbin. This age should be capitalized so going to go can create an issue so remember i'm looking at the website from jojo's perspective.

22
00:05:13,950 --> 00:05:35,110
And so i'm going to go ahead and create a new issue. And then i will say. Fix. Spelling with git. Hub. Hub should have a capital. H. N here I'll make sure that i assign ray.

23
00:05:35,460 --> 00:05:53,460
Or myself i guess and. I am not sure that this is a. Any particular issue so maybe this will be a bug I'll call it a bug so I'll give it that kind of label and I'll make it still part of that same milestone and now notice that.

24
00:05:53,970 --> 00:06:02,280
Ah it's fifty percent Don cause there is another issue. It's going to attract the steps towards the milestone according to the amount of issues that have been resolved.

25
00:06:02,670 --> 00:06:20,380
Some of us submit new issue here. And i'm going to now switch back. Into my own account. And i can see the activity here 'em that jojo has commented. That she's going to take a look at the issue.

26
00:06:20,730 --> 00:06:32,730
Now because things are getting a little bit complicated if i click on issues this will update and it'll say that i have now two issues. And so what i can do is i can create a project and that's kind of a better way.

27
00:06:33,180 --> 00:06:47,320
Of handling issues. To create a project allows you to do some additional things and look at all the issues and a number of different ways. So with projects if you have n older project.

28
00:06:47,430 --> 00:07:03,570
You have the option of creating classic projects or normal projects this particular repo was created a long time ago so it's actually giving me the option of doing classic projects but if you were doing this yourself you might only see the ability to do new projects.

29
00:07:03,930 --> 00:07:21,090
So let's go ahead and. I can either link to an existing project or i can create a new project. If you've created projects before. In any of repositories you will see this link to an existing project but in this case i'm gonna select new project here.

30
00:07:21,720 --> 00:07:37,600
And i'm going to hit the new project button. You'll see that i can choose different ways of looking at my work so there's the tableview which is sort of like an expelled excel spreadsheet and that can show me all of the sort of a project items.

31
00:07:37,680 --> 00:07:50,790
That can be tied to issues i can also look at it in a kanban view and this used to be the old way of doing things or i can also look at a roadmap that is more of a traditional project management kind of look.

32
00:07:51,270 --> 00:08:13,680
Now for this one it's pretty simple and but i really love this can Ben type of board someone hit the create. Button and i'm i can one choose more than one view if i want to notice that from here i can have you one and i can select the new view and see these and a number of different ways but i really do like for project management this sort of can Ben.

33
00:08:14,220 --> 00:08:34,260
View which is a part of the agile methodology and notice that it's given me a number of different sort of columns and if i want to i can add more columns but this is usually sort of enough to to work on something here and from here i can add items so here you can create what's called a draft 'em.

34
00:08:34,740 --> 00:08:49,120
Issue so this will be where you brainstorm additional ways that you want to organize this project. Ah but we already have awesome issues. So what we can do is s m go to.

35
00:08:49,800 --> 00:09:10,360
And ah let's see we can. Add an item here and I'll just say fix. Spelling. Errors. One. Site. It's a now it may dot a draft issue i can convert that to a regular issue.

36
00:09:10,620 --> 00:09:30,000
Rights i can have convert to issue. And this is n the musical spoon repository and now this actually becomes another issue. In my repository so knows that projects aren't necessarily relate it to specific repos they can have more than one repo that they're related to.

37
00:09:30,390 --> 00:09:46,450
Someone or renamed this thing. Special project here and i can give this additional descriptions. Ah and. If i want to just modify it like that so. I'm going to go back into the special project.

38
00:09:46,770 --> 00:10:04,230
And here it is. And notice that i'm now i can see this issue. And click on it to take a look at similar types of. You know sort of. Sections here so i can add assignees me and Joe Joe to take a look at this.

39
00:10:04,740 --> 00:10:18,448
And i can add same thing i can add labels so this might be. A bug here and add milestones so. The final review milestone here. And i can continue to work on this issue.

40
00:10:18,868 --> 00:10:36,808
Until i am finish fixing the problem and once i do that then i can close out this issue. Or i can go back into my repo so we'll go back into. The musical spoon project and now on there are projects you can see that the special project.

41
00:10:37,258 --> 00:10:47,878
Is being listed right here. There's a lot more than you can do with issues and projects but that gives you a little bit of a taste you really want to take a look at my course.

42
00:10:48,328 --> 00:10:59,968
On project management for a good hub. It goes a lot deeper into all the options guns but em i find that projects are a fantastic way to organize the kind of things.


@@@
1
00:00:00,540 --> 00:00:09,240
Let's talk about the different ways that we can synchronize what's on git hub with our local hard drive. The first way that we do this is by using a command called git clone.

2
00:00:09,750 --> 00:00:19,110
Git clone will take the copy of the github repository and place it on your local hard drive. If we already have a copy of the repository on our local hard drive.

3
00:00:19,470 --> 00:00:44,490
In order to see synchronize the information that is on github we can issue a git fetch command. Fetch downloads information from the remote repository and brings that information to your local repo so that it's up to date now it doesn't actually do anything with the information but it does synchronize the link between woods on your local drive with what is on your remote finally there is the pull command.

4
00:00:44,850 --> 00:00:57,940
Pull is a combination of doing a fetch but also merging the data that is in your remote repository with the local version. So let's go ahead and try those different commands first off i'm going to try to clone.

5
00:00:57,990 --> 00:01:07,140
A repository to do that we're going to need to have a terminal open. And i'm going to put this on the desktop which is where I've been storing things.

6
00:01:07,710 --> 00:01:18,840
And i need to issue a git clone command and then include the you are out of the file that i want to clone. For that we can go to the website and right here is a button called code.

7
00:01:19,200 --> 00:01:30,030
That you can use to do download the link so if i click right here it'll copy the link to the repository that this link is really just the u r l of the repository plus.

8
00:01:30,390 --> 00:01:45,540
The extension dot g i t just in case you forget it so once we have that. We can go back into our terminal. Paste that u r l and i'm going to hit return and you can see that it downloads everything into our local hard drive now let's go back into the desktop.

9
00:01:45,900 --> 00:01:59,700
You can see that it called it whatever it's called at git hub and if we open it up it's going to have all the files that are on get up and we can open this and something like visual studio code but we already have this project downloaded.

10
00:02:00,090 --> 00:02:12,540
Into our our desktop on this folder it's ok to download multiple copies of a project the copy that you've just downloaded from github it's actually the latest version of what's stored.

11
00:02:12,900 --> 00:02:22,300
In github itself we really need this so i'm just going to put this on the trash. And i'm going to open visual studio code which should have the project that we've been worse can with.

12
00:02:22,410 --> 00:02:36,360
Here if you take a look at this section and visual studio code. You'll see that we have the main branch as well as the fix that line branch and there's nothing really else that this project knows about what's happened to this project.

13
00:02:36,720 --> 00:02:57,040
Since we've updated it and get up so i can issue a git fetch command here. And it's going to take care of looking at the data that is on git hub and downloaded that into the current project so if you remember we created a branch on github called title change and so it brought that branch into our local repository.

14
00:02:57,180 --> 00:03:20,850
So if we click right here we can see that this branch will also oh appear. In here under title change notice that it says that it's under origin slash title change so you can see that there are some branches up here these are the branches that are on this machine and then there are some branches that are at git hub and those are under the origin.

15
00:03:21,180 --> 00:03:37,200
Which is the remote name and then the name of the branch. So if we took a look at our branch list let me clear this out and I'll do a git branch command you'll see that it's only showing me the two brands that are here locally but i can do a git branch minus a command.

16
00:03:37,680 --> 00:03:52,830
That's going to show me all the branches including the remote branches. Now if i want to check out one of those branches the easiest way if you have visual studio code is to just come over here and click on any of the branches that you want to bring in from the remote branch.

17
00:03:53,190 --> 00:04:03,150
So i could just click on this rate here and it's going to switch me over to that title change branch and it's going to bring it n locally he considered ussr right here already.

18
00:04:03,570 --> 00:04:17,680
Around i'm going to switch back over to the main branch. And i'm going to issue. The last command which is. The git pull command. That's going to try to bring in all the changes but because of the way that i created this repository.

19
00:04:17,940 --> 00:04:41,380
I then set up an upstream link from my being brash ach to my remote branch so i do need to copy this command rate here. And I'll paste it. In what i want to do is make sure that i Ty n my local branch would just call Maine and link it to origin Maine so this is the command that i need to execute.

20
00:04:41,910 --> 00:04:58,530
Now the local version of Maine has been synced to the remote version of Maine. Clearly this out and issue a git pull. Now all the changes that were on the remote version of our site have been changed locally so if i take a look at the index.

21
00:04:58,920 --> 00:05:11,200
You'll be able to see that i do have that title change. Now want to do is make sure that we add that new title into the columns as well as the me media file so i'm gonna come over here.

22
00:05:11,340 --> 00:05:22,420
And I'll copy this. I'll go ahead and create a new branch just to show you how git flow will work with a remote repository. So we will do a git switch.

23
00:05:23,040 --> 00:05:38,560
Minus c. And then I'll call this thing. Other title the changes. This creates a new branch and now i can go into. My other files. Paste that change I'll save this.

24
00:05:39,450 --> 00:05:56,580
And pace that change and I'll save this those files are now modified. Let's clear this out. And i can do a git add period. And git commit. And put in a message right there.

25
00:05:57,090 --> 00:06:14,770
So now we'll go back into. Main. And we'll merge. Other title changes. Alright so now what i want to do is push all of the changes that I've done locally.

26
00:06:14,940 --> 00:06:27,120
And push them onto get hub so i can do a git push. Now that's going to push the changes that I've made locally but only to the main branch so you can also do.

27
00:06:27,540 --> 00:06:38,920
A git push minus minus all if you want to push all the changes in all the branches. Let's take a look at what's happened in git hub. I'm going to refresh this page.

28
00:06:39,840 --> 00:06:55,600
And you'll notice that i changed everything in the main branch. As well as added this other title changes. Into our branch list now i could have just pushed the other title changes branch and then created a pull request.

29
00:06:56,280 --> 00:07:06,730
That will work but the change was so little that i just took care of but in the main branch as well. So let's take a look at this issue now and i'm going to make a comment.

30
00:07:11,010 --> 00:07:26,920
And. I can actually type in the ad sign here to pull up a list of names and my project and let pterodactyl know. Terry will get a message which will be an email and then I'll let Terry know that the changes have been made.

31
00:07:31,980 --> 00:07:43,140
I'm going to close this issue. With this comment. So now we've got a history of everything that we've done here all the way down to closing the issue which means this issue has been fixed.

32
00:07:43,470 --> 00:07:54,900
We go to projects again. You can see that everything looks great here and if i want to i can archive this and it'll remove it from the list of to dos.

33
00:07:55,260 --> 00:08:09,610
Which is something you want to do every now and then. Right so the final thing that i could do is create a release here for this project. It looks like releases aren't showing right now so you can go right here.

34
00:08:09,660 --> 00:08:25,350
And then make sure that you turn on the release feature to release is like an official version of your website. The reason you do really leases is because you want people to have access to a specific version of your site.

35
00:08:25,710 --> 00:08:35,910
Your repository is going to change all the time and you want people to come back to any specific version so that if they're using it on their project.

36
00:08:36,210 --> 00:08:47,260
They can always have that version to work with so now that I've added that back i can go to create a new release and i can give this thing a version want to give it a v.

37
00:08:47,610 --> 00:09:09,100
One point zero point zero. Usually versions on the web have three digits this is a main release. This is sort of a sub release and this is is a very minor release so this is sort of like bugfixes and then the next one is any change that would break some things n d.

38
00:09:09,210 --> 00:09:23,400
Original release and then a new version like aversion to would be a completely new version. So the target of this release is going to be whatever happens to be in the main branch i could choose some other branches if i want to from here and then i'm gonna give this.

39
00:09:23,820 --> 00:09:37,800
D release title. And I'll just call it first release. And i can write some notes in here if i want to but i don't need to do that. And here you can see more information about semantic versioning here.

40
00:09:38,190 --> 00:09:47,370
You can also make this a pre-release which means you're letting people know that. This isn't production ready quite yet in that case you might name it something like this.

41
00:09:47,790 --> 00:09:56,520
V point one Alpha Eva it really wouldn't be called the version one or however else you want to do this you can read the notes over here and semantic versioning.

42
00:09:56,910 --> 00:10:09,360
This isn't going to be a beta or anything like that it's going to be an official release so i'm going to say publish release. And this gives you a place where you can publish all your releases and pay.

43
00:10:09,792 --> 00:10:27,612
In here and download the source code for your files and take a look at your code and that state. So that's something that people can always go to notice that it also creates a little branch for the release and that way people can always come back.

44
00:10:28,092 --> 00:10:36,612
Into this version of the code code when you made the official release. You can see they get hub is pretty useful for doing more than just creating different versions.

45
00:10:36,912 --> 00:10:49,762
Of your site so in addition to having the capabilities of a time machine with get. Github really gives you a way to create a social environment where people can collaborate together.


@@@
1
00:00:00,540 --> 00:00:12,630
If you want to keep track of what's going on with your repository. And what you want is to go to the insights tab. So this tab is going to give you all kinds of information about what is going on with this project.

2
00:00:12,960 --> 00:00:26,940
Just know that this is going to show a little bit differently depending on whether your repo is set to private. And whether you have have a get her pro or an enterprise account some of the features that you'll see here will only show up on certain types of account.

3
00:00:27,330 --> 00:00:40,000
So you may not see everything that i'm about to show you. And you can take a look at different ranges. Now this project has been going on for awhile I've used it in discourse and discourse has had a couple of revisions.

4
00:00:40,230 --> 00:00:51,420
So so i do have some activity. Not in all of these different places but certainly in some so you can see here. That we have had six merged pull requests in this time period.

5
00:00:51,990 --> 00:01:04,390
I am right now the only author even though other people are added into the project and the only one that has. Committed things to mean. An and. There's also been several additions and deletions.

6
00:01:04,530 --> 00:01:18,010
So this is a great place to see what is going on and take a look at the graph of the active issues here plus if you go to contributors you can take a look at the commit that have happened over time.

7
00:01:18,150 --> 00:01:31,710
And also additions and deletions. Right over here so we can look at additions here. I don't get like a huge graph because this isn't exactly like a super popular project but you could see here.

8
00:01:32,250 --> 00:01:45,430
That there's been a lot of work even though it happened all. In sort of spirit here of different places so you can even select. These different ranges to see sort of the activity over time.

9
00:01:45,660 --> 00:02:15,190
Now n community i'm not going to have anything because i haven't set up discussions just yet we're going to talk about that later. And if you go to community standards you could see a checklist of how this compares to get hubs recommended commune the standards i talked about all these different special files that you can add and so this is another place where you can get to those files and create them if you want to have this meet the community standards.

10
00:02:15,270 --> 00:02:28,140
That git hub has if you take a look at traffic you can see another graph of. The clue loans so some people have cloned this repository and also there's also been.

11
00:02:28,590 --> 00:02:37,960
A lot of visitors i mean not a ton but this does have some activity because as i mentioned. A lot of people do look at this project and you can see sort of the details.

12
00:02:38,040 --> 00:02:53,800
Of what is going on with everything in the pool project also where the people that keen to the site came from this might be good if you for example added your blog to your website you can get a little bit of information about some of the traffic.

13
00:02:53,880 --> 00:03:04,890
That comes to that project and there's an additional place for just the commits overtime rate here. So it's pretty self explanatory code frequency just tells you again.

14
00:03:05,310 --> 00:03:19,440
Sort of a list of what is happening with your code. Additions vs deletions here. Which is fine and really go here that often. The dependency graph really normally it refers to.

15
00:03:19,830 --> 00:03:38,520
When you have liquor package that Jason file because you're working. On a node js project or a gemfile from like a Ruby project and this would tell you what dependencies your project has and if any of those dependencies are out of date but this particular project is just a bunch of.

16
00:03:38,940 --> 00:03:54,160
Html files so. It's not really give you any information. There is something called the pen the bot that you can setup to have good hub keep track of. Your dependencies and when they go out of date and suggest.

17
00:03:54,240 --> 00:04:11,460
Changes to those. Dependencies if you need to update them. So network you can kind of see if there are are more than one people making. Either pull requests or recommendations to changes in your code they would show up right here i'm pretty much the only person.

18
00:04:11,880 --> 00:04:20,280
That does anything but occasionally I'll get like a strange pull request from somebody taking the course and just creating a pull request for the heck of it which is fine.

19
00:04:20,640 --> 00:04:33,870
It's not a big deal but it's not something that i normally add onto the course. You can see kind of the labels for when those things happen. Same thing for forex there have been some people making forks this is just basically a copy of.

20
00:04:34,320 --> 00:04:45,990
The musical spoon project if somebody just wants to play around with it on their own. Repository they can make a fork of it and that's like a duplicate and pretty easy to do so if we go.

21
00:04:46,500 --> 00:05:05,370
Back in here to the code. Then i can do a fork right from here. You can also see here the amount of forks that have been done and the number of people watching what's going on with this project and also i have gotten three stars on this project that is not a ton but.

22
00:05:05,730 --> 00:05:13,530
This kind of projects not really meant for people to sort of. Do stuff with so it's not particularly useful but it's nice to get a star every now and then.

23
00:05:14,070 --> 00:05:31,900
And so you can take a look at a lot of what's going on with the project right here. Now if you go back to your ma mean. Sort of profile page. You'll be able to see some additional sort of information about the projects.

24
00:05:32,100 --> 00:05:49,140
So you can see here that you can take some of your repositories and pin them so that you can see repositories that perhaps have a lot of stars or have a lot of traffic you can kind of put them all in here and pin them so you can all always see them so you could see here that.

25
00:05:49,470 --> 00:06:03,120
Because i have a repository with the username planet of the web. Then that read me file shows up in here i talked about this earlier. But here you can also see sort of information about the amount of followers that you haven't.

26
00:06:03,510 --> 00:06:11,400
I just happened to have a lot of followers and i do a lot of course this so that's where that comes from and then i'm actually only following thirteen people so.

27
00:06:11,910 --> 00:06:23,520
Tells you a little bit of where i am at and where i'm from. And you can see other things in here so the pin repositories are actually pretty cool you can customize them despite clicking on this button right here.

28
00:06:24,030 --> 00:06:38,400
And then you can pull up sort of any project you can have up to like. Six showing up at any one time. So usually what you end up doing this if you do a new project and you want to sort of keep up with how that product is doing over time.

29
00:06:38,850 --> 00:06:49,650
Then you can pin it and of course i have sort of. My most popular projects here although express js is. A little bit more popular it's a course that got rerecorded by somebody else.

30
00:06:50,040 --> 00:06:58,500
So i really need to keep track of it. So some of this new things that i have done as i have something in the github marketplace go copy two branches to really.

31
00:06:58,920 --> 00:07:07,650
Simple sort of utility that lets you copy. You know things from one branch to another and this podcast generator is something that i create for a course.

32
00:07:08,010 --> 00:07:19,390
So i like to keep track of those things and saw a pin them to my profile so that i can always get back to them and see them and then you can see here the contribution graph.

33
00:07:19,470 --> 00:07:38,710
And this allows you to take a look at the contributions and you can sort of. Just look at the key contributions. You can turn off the private contributions because you may not want people to know about those and you can show or hide this on your profile.

34
00:07:39,000 --> 00:07:49,380
So that other people can't see it as well so this also shows you sort of your activity within. Git hub and also the different organizations you're tied to rate here so this is.

35
00:07:49,740 --> 00:07:59,580
The different things that i have contributed to. N actually sixty one other repositories so. You can get more information about that here so i really do love this page and.

36
00:07:59,940 --> 00:08:08,310
You can actually also go back through time i feel like i did better in twenty twenty two in terms of. Github usage which is strange because i'm always on get up insisted.

37
00:08:08,700 --> 00:08:22,110
I don't always commit a ton of stuff. I guess i'm okay because. We're right now like in September so this empty area. Is not really a big deal but this kind of le to go look at what you were working on.

38
00:08:22,650 --> 00:08:31,470
And your periods of activity. Which i really love and you can see some other work here contribution activity some of the stuff that we just did on this course.

39
00:08:31,890 --> 00:08:51,280
As well as some of the other things that have been happening since the great place to go every now and then. And there is all kinds of other. Cool stuff and get hub i really love the profile site and the ability to star projects and also take a look at how well my projects are doing.


@@@
1
00:00:00,510 --> 00:00:17,520
The github website has probably more shortcodes than any other program I've ever seen in my life. It's almost ridiculous now there's a few that I'll show you that are my favorite shortcuts that you probably want to know but for all the other ones make sure you check out this you are al right here.

2
00:00:17,910 --> 00:00:31,680
In the documentation there are just pages and pages. Of different shortcuts n i'm not even sure that this lists all of them. Because all kinds of different things have different shortcuts attached to them.

3
00:00:32,190 --> 00:00:42,840
So here are some of my favorite. Number one the only one that you need to know is the question marks if you hit the question Mark. Ii basic we get a list of most of the shortcuts.

4
00:00:43,230 --> 00:00:54,310
Now this is context sensitive. Which means that depending on where you are the shortcuts that it lists here are different and this also has a link to the documentation.

5
00:00:54,630 --> 00:01:04,440
That i showed you awhile ago so if you don't remember anything else just remember the question Mark. Now the next one that i like to use the most is just the slash you can see right here that it says.

6
00:01:04,830 --> 00:01:21,640
Type slash to search. And here most of the time i am looking for projects or things in my projects so if you are in a repo notice that. It automatically realizes that you may be looking for something within that repository.

7
00:01:21,690 --> 00:01:34,870
So this is also context sensitive if i'm looking for say a javascript file maybe i do a dot j s. And let's of course i didn't have a digests let's do a dot html.

8
00:01:35,160 --> 00:01:42,960
Because i know i have several of them i can move up and down with the arrows to get to the file that i'm looking for sure and then set the return button to get to it.

9
00:01:43,440 --> 00:01:54,210
Immediately taken me to an editor lets us go to my profile. And then I'll do a slash and this time you'll see that it's giving you slightly different things.

10
00:01:54,570 --> 00:02:05,820
So as i mentioned it is case sensitive and that's ok so in addition to this. Slash to search you can see right down here that there's a special thing called the command.

11
00:02:06,240 --> 00:02:27,570
Palette so think about in a code editor how you have the command palette and it kind of brings this sort of combo box that does all kinds of things like let you go again directly to repositories so it's sort of like a search but a little more powerful and definitely a place for you to check out so from here i can do something like.

12
00:02:27,960 --> 00:02:37,960
Take a look at my projects so it's a little bit more flexible than the search and it's sort of constraint to like the things that you would be looking for.

13
00:02:38,130 --> 00:02:52,650
All right so in addition to that i can also type type n. The shortcut for the command palette itself is command k. On a Mac or control k on windows. Let's go back into my repository.

14
00:02:53,190 --> 00:03:06,000
And I'll do command key can see that it comes right up and of course you can also hit this button. Right here. Another the thing that you might like is let's open up a repository.

15
00:03:06,750 --> 00:03:26,670
So let's go back to overview actually repositories. And then we'll open up this musical spoon. So if i hit the g key and then i hit i i go to issues and i can hit g n p to go to pull requests so there are shortcuts for every one of the tabs.

16
00:03:27,000 --> 00:03:38,530
You can probably not use the mouse at all and once you get good as some of the shortcuts. You'll be using that instead of the mouse cyst a lot faster.

17
00:03:38,730 --> 00:03:55,710
Get a couple of other really good ones. Are the period the period takes you to a. Code spaces like editor that is known as github dot Dev so if you take a look at this you're ok redhill your notice that it actually switched this from github dot com.

18
00:03:56,070 --> 00:04:14,430
Slash my username and then slash the name of. The project to get hub dot def. This is a lightweight editor it doesn't let you run build processes. Like code spaces will do but for the most part if you just want to edit something in your project this this is a really quick way of getting in there.

19
00:04:14,910 --> 00:04:26,310
You can see that it actually opened a lot quicker than your code base would and the other advantage is that you can actually send somebody a u r l to this github dot dav.

20
00:04:26,790 --> 00:04:37,060
By just copying and pasting this and then they go straight into a sample of your code. Sorry really do like that. I had shown you that you could do a git hub.

21
00:04:37,920 --> 00:04:50,700
Dot knew to create a new repo before so that's another one that i use. All the time it has another one like it called repo. Dot nu n it basically takes you to the exact same place but.

22
00:04:51,180 --> 00:05:06,750
A couple of shortcuts for that. Now there's a couple of other really used all things that you should know. There is a section right here. That allows you to turn on upcoming features called a feature preview.

23
00:05:07,170 --> 00:05:20,310
So this lets you. Look at. The different features that are being added and tested in beta by git hub and you can see that i'm really excited about just about as any new features so i usually end up.

24
00:05:20,820 --> 00:05:31,510
Turning everything on i'm not a big Jupiter notebooks. Person so i don't have that one up and you could see that almost everything else is turned onto like the command palette.

25
00:05:31,620 --> 00:05:44,560
So your command palette might look a little bit different than mine but it's definitely on. If you're trying something out in mice green looks a little bit different then make sure you go to these feature previews rate here.


@@@
1
00:00:00,480 --> 00:00:15,430
Discussions are a way to encourage conversations about your code. That are not necessarily related to fixing code. Discussions are based on github issues so they look a little bit like issues but they have some additional features.

2
00:00:15,660 --> 00:00:31,030
Discussions used to happen actually inside issues people would discuss all kinds of things that were really problems related to the code which is what issues was originally designed to deal with so get up broke this out and added it as its own features.

3
00:00:32,130 --> 00:00:44,400
Like with issues discussions are threaded conversations. That offer the rich power of good hubs existing messaging tools. If you find that a conversation offers a unique idea that should be turned into a feature.

4
00:00:44,730 --> 00:00:56,050
You can easily turn discussions into issues easily. Let's take a look at how they work in our little project. So i'm going to start by going to settings.

5
00:00:58,590 --> 00:01:19,620
And i'm going to turn on discussions for this project. Second scroll down here and it turn on discussions. And then also set up discussions. This will begin by letting me place a new discussion that is d welcome to the project.

6
00:01:20,070 --> 00:01:34,140
So i'm going to say start discussion. This will create the first issue and it gives you these nice little confetti here. And from here we can go back into the main discussions screen and we can see that it gets added and pinned to the top.

7
00:01:34,560 --> 00:01:55,150
You can see that it gives you a little bit of help right here and you get a bunch of categories that you can automatically place discussions into and you can also add these by clicking right here and then either deleting these or adding your own so you can see a new category right here and also you can create sections for additional categories.

8
00:01:55,230 --> 00:02:05,550
So let's click back into discussions. You can see that by default it gives you away to search through different discussions and it works pretty much like the github search would.

9
00:02:05,880 --> 00:02:13,560
So you can search by say a specific author and it's always going to give you help and also it's going to give you all these other edition little labels.

10
00:02:13,920 --> 00:02:23,610
That you can look for things in here so you can say look for. Planet of the web as the author and something that is closed and of course you'd have to get rid of this.

11
00:02:24,060 --> 00:02:33,270
Is open and then you can hit return and it would give you some matching discussions but since these are brand new there's not going to be any new discussions other.

12
00:02:33,600 --> 00:02:51,130
Than the one that we first created so let's go back to the home page here you can see the single discussion you can tell that you can vote these up or down so if you have multiple discussions you can up vote them and that's pretty useful so that you can see which ones are the most popular discussions.

13
00:02:51,240 --> 00:03:04,720
Let's go ahead and create eight another one. And there's different categories as i mentioned before one of them is polls and so let's go ahead and try doing a poll because that's a pretty cool discussion type so i'm gonna say.

14
00:03:05,010 --> 00:03:22,650
What do you think. And then I'll ask a question what feature. Do you think i should add next. And we'll put in here the poll question. Feature to add and will say new pages.

15
00:03:24,030 --> 00:03:47,040
Help. System. And then we can add another option here. Dynamic search. All rights will say start discussion. And now people can come in here and vote on this poll you can see that as people vote this would get additional sort of graphics here that would display how people are voting on this topic.

16
00:03:47,400 --> 00:04:05,790
Now i can pin this discussion and that can go either to the top of the patients go ahead and do that so we could see the two. Sort of discussions pp pen and then i can also pin the discussion to the category so also at the top of the page in that category you would be able to see that discussion as well.

17
00:04:06,150 --> 00:04:17,830
So you can see here that we have the pin discussion. That we just created here under polls and then sort of the first pin discussion that we managed to add when we create edit the peach.

18
00:04:17,940 --> 00:04:34,080
You can create four different pins that go up here. And let's go into one of these discussions to see what else we can do inside the discussions. So there is of course a place where you can change and add labels and also you can.

19
00:04:34,440 --> 00:04:43,260
Turn off notifications because by the f vol two will get notifications when somebody interacts with this poll which would be fine because i want to know when people vote and stuff.

20
00:04:43,680 --> 00:05:00,270
Or you can add comments into any discussion item and this has a full featured markdown editor with all of the different pieces of help that you can do here so for example you can reference issues you can reference people you can create task lists in here as well.

21
00:05:00,810 --> 00:05:15,880
And you can use all the shortcuts or just use markdown and then let's write a comment. I'll just say i love. This poll. Thinking about. What other questions we should ask.

22
00:05:16,560 --> 00:05:44,130
Ask here and I'll just say comment. In also close this with comment. And I'll just say comments here. Right to that will appear over here now and tells you who wrote it and when they wrote it and gives you some additional options if you want to hide this or deleted you can also report the content and also quote the reply if you want to reply with this somewhere else where you can copy the link to also reference that and perhaps.

23
00:05:44,490 --> 00:06:00,030
Another message and here is the place where you can upvote it of course because it's me it already up voted it's what doesn't let me avoid it and. Give it a second upvote somebody else would have to do that and then you can also click in here for images thoughts add like a.

24
00:06:00,540 --> 00:06:15,300
Love emoji here because this is a good comment i guess. And there's a lot of other options in here. So you can say locked this conversation to prevent additional conversations from happening maybe when this poll gets closed.

25
00:06:15,720 --> 00:06:31,180
You can transfer this discuss Russian to maybe another repository so if you have another discussion in a separate repository you can do that there. You can unpin the discussions from either the top of the page or the category or you can delete.

26
00:06:31,320 --> 00:06:54,030
The discussions. Now let's take a look at another one of the conversations we have I'll go back into this first one. And. You'll see that whenever we are not doing polls we get this additional option here where we can create an issue from this discussion so if you're having a long discussion and you realize that this would make a fantastic issue.

27
00:06:54,390 --> 00:07:10,140
You just click on that button and look it automatically went to the issues tab and a created or at least that let's you can create an issue with everything that is in that discussion so far and so we could do the normal things that we do with issues here.

28
00:07:10,470 --> 00:07:26,590
I'm going to go back into discussions and. When you create enough discussions you also get an additional item under insights although i'm not going to have very much in there if anything at all but now when you have the discussions.

29
00:07:27,210 --> 00:07:41,940
We should be able to go to the community tab and take a look at the contribution activity. And some of these other graphs however since this is pretty new it doesn't have a lot of data to fill these out on surprised that it actually showed me this one.

30
00:07:42,330 --> 00:07:56,800
Right here. So definitely something that you want to peek into as your. Discussions groups get going a little bit longer. Let's go ahead and actually go back into the other discussion.

31
00:07:57,000 --> 00:08:11,430
And I'll make a comment here. So glad we started this. I'll say comment. And i'm going to go ahead and close this discussion just to show you that now.

32
00:08:11,910 --> 00:08:33,990
Nobody else can comment actually you can still comment we can reopen the discussion. But you can no longer comment on the discussion. Until you reopen it and you can also close this in different ways as you can close it is maybe something that outdated or you can also close it as a duplicate answer because somebody already created this or gave this.

33
00:08:34,350 --> 00:08:50,530
You know maybe answered it somewhere else. So you definitely don't want a lot of duplicates in your discussion. So discussions are a little bit like issues and also feels a bit like sites like Reddit and others that allow you to have all these features for a fantastic community.


@@@
1
00:00:00,510 --> 00:00:08,520
Github sends notifications for all types of activities on the website so let's go over some of the types of notifications and how to control them a little bit.

2
00:00:09,150 --> 00:00:20,550
So there are three main venues for checking your notifications. The first is on the website itself there is a notifications tab right here and you can see that it has a blue dot because.

3
00:00:21,030 --> 00:00:34,440
I have recently gotten some new notifications also. In the same way on the on any specific repo you can take a look at how those notifications will be tracked for this specific repo as you can see here.

4
00:00:34,830 --> 00:00:48,150
That can say participating and mentions all activity ignore if i never want to be no modified or custom. Knife i click on custom. You'd see that i can get notifications only for specific things.

5
00:00:48,480 --> 00:01:05,460
That's how you do things on a repo level you can also click on this notifications and it gives you a similar kind of interface. To other things and get help where you have these different sections that allow are you to do things so the first is to look at things on the website.

6
00:01:05,820 --> 00:01:17,160
Another way of getting notifications is by email. Now when your team perform certain actions you'll tell git hub to let you know by sending you an email and you can control how that works.

7
00:01:17,490 --> 00:01:27,970
Finally you can also take a look at notifications through the mobile apps location. Is a similar interface to this right here but obviously because it's mobile it's a little bit simplified.

8
00:01:28,260 --> 00:01:40,500
So on this notifications inbox basically it's sort of like email type interface where you get a list of messages for the notifications that you have over here on the left you have.

9
00:01:40,860 --> 00:02:03,150
A sort of way of looking at an inbox for all the new notifications. You have a section here for unread notifications of ones that you haven't seen before and then this tab for all there's also a lot of filters and sometimes it may be good to not to see all the notifications but look at them by repository it makes things a little bit shorter and tries to group things.

10
00:02:03,630 --> 00:02:14,940
A little bit better so i like to have that on most of the time. You can also filter in different ways so you can filter by all the notifications that have been specifically assigned to you.

11
00:02:15,300 --> 00:02:26,820
The ones where you're participating. Any that you have been mentioned n. Etc etc reso in addition to that you have sort of the latest repos that have notifications for you.

12
00:02:27,270 --> 00:02:39,270
So you can take a look at all those right there and whenever you find a notification that you want to get back into you can actually bookmark it and they would appear in this saved section.

13
00:02:39,660 --> 00:02:53,250
So that is another way way of sort of highlighting specific notifications. That you want to take a look at later. There are lots of settings where you can control how those notifications are sent to you.

14
00:02:53,790 --> 00:03:09,870
And i'm going to do that by going to this icon right here with my photo and going to settings so this. Has a notifications section and this is where you configure how you want get her to send you information so you can see here.

15
00:03:10,260 --> 00:03:24,420
That default notifications email will be a specific email. That you have added into git hub when you create your profile you can add different emails and this drop down here will have a list of all the emails that you have added.

16
00:03:24,780 --> 00:03:36,900
Now for the most part you can automatically watch repositories. So i believe this is on by default but if you're getting too many notifications you know we have a group that.

17
00:03:37,230 --> 00:03:45,600
Has like over nine hundred repos and i myself have hundreds of repos as well so i don't always want to be notified of everything. So you can turn this.

18
00:03:45,990 --> 00:04:07,890
Toggles on and off here and then also when you join a new team you will automatically be subscribed to updates and receive notifications as well so if you're getting too many notifications you may want to turn these on or off a lot of times it depends as to what your role is for that project so there's also a place where you can control your subscriptions.

19
00:04:08,250 --> 00:04:30,480
So you can same how you want to be notified so whether you want to be notified. On the notification sort of tab or you won't get her to send you an email so you can control that here and also what happens when you are participating on conversations and somebody since you mention do you want to be just notified on github or already wanted to send you an email.

20
00:04:30,840 --> 00:04:44,020
So that's pretty cool. And there's also something here for what happens when you run and get her back then. If you want it to notify you by email i like to have this at least the failed workflows.

21
00:04:44,280 --> 00:04:53,430
Send me an email and only notify me when a workflow fails if you're running a git have action and it happens to fail. I like to get those emails for sure.

22
00:04:54,030 --> 00:05:07,560
And then if there's new vulnerabilities you can choose also how you get notified there's also l c ally tool. I actually i'm going to cheese at the email because i don't use the cla tool very much for the pen the bot alert.

23
00:05:07,950 --> 00:05:23,490
Dependent bot is something that tracks your repos dependencies and it can notify you if something gets to be out of date and if one of your dependencies has maybe been deprecated and needs to be updated he can do that as well.

24
00:05:23,854 --> 00:05:37,510
Can also get a weekly digest which will just send your weekly summary. That may be good if you don't want to get all the notifications. You know every day every minute that they happen if you're like me that has already hundreds of repos.

25
00:05:37,620 --> 00:05:50,910
So you may want to get this thing sent either weekly or daily or not to send at all oh and then also if you're giving permissions to an organization. You can get notifications of deploy keys here.

26
00:05:51,240 --> 00:06:10,060
There's really a ton of options for notifications. For the most part for critical things i like getting emails. For day to day notifications i like using this notification panel and there's a lot that you can do here to control how often and what you want to be notified of.


@@@
1
00:00:00,510 --> 00:00:13,140
If you have a good hub account you also have access to this cool feature called jests. They let you share code snippets with others. I just exist both inside as well as on their own page called.

2
00:00:13,500 --> 00:00:28,470
Just dot github dot com. When you go to this page you can create a new just and there's even a cool shortcut you can say just. Dot new. And this will take you to that same page and let you generate a new jest.

3
00:00:28,920 --> 00:00:41,580
Then here you can see that if you have previously used just before you can see the latest ones that you've created right here. And you can click over here to view all of the jests or just say start to create your own.

4
00:00:41,910 --> 00:01:01,210
Now you'll notice that you see the icon from my LinkedIn profile as well as notifications here. And you can also click right here to add a new jest but here you can see that it's picking up this information from my github profile and i can also go directly to the profile right here.

5
00:01:01,500 --> 00:01:21,240
So to create adjust you add a optional description. And then you add a file name with an extension so you do want to include the extension. Because it's going to help digests figure out what language you're using.

6
00:01:21,630 --> 00:01:42,060
So you can call this nav. And then I'll say boots trap. Five. Dot html. So we're going to paste the code from our project here and you can also control how you want this code to be written whether it's tabs or spaces and how many tabs or spaces you want to use.

7
00:01:42,390 --> 00:01:52,140
I like to use two because i'm usually working. With out a lot of work zonta room really zoomed in so that people can see Michael clearly on a big screen.

8
00:01:52,530 --> 00:02:11,340
So two spaces it is for me and you can either wrap the code or not rapid depending on how you want to see it and then you would just paste your code in here somewhere to go back into the musical spoon website and open up one of my files to just grab the code for the navigation that we just did.

9
00:02:11,760 --> 00:02:25,170
So i'm going to take all this naff code rate here. And just copy it and then put it in my new just. Hearing you can see that it's picking up some of the syntax highlighting or the color because we are.

10
00:02:25,560 --> 00:02:35,190
Using the dot html extension so you can use sort of the classic editor shortcuts here some using command he could use control brackets to indent in and out.

11
00:02:35,520 --> 00:02:53,910
Since. Wii code already had some indentation but i don't really want it for this just i got rid of some of the indentation. And if i want to i can also add additional fee files so the just doesn't just have to have a single file it can have multiple files in the same place or perhaps.

12
00:02:54,240 --> 00:03:09,540
I could add some css that was related to this html. The gist can be either secret or public and the counter remembers the last thing that you did so it says create secret just right now but if i said cr create public just the next time i did one.

13
00:03:10,020 --> 00:03:29,340
It would try to remember that so i'm going to go ahead and create this public just. Once the gist is created you also get this sort of window here. Where you can take a look at the revisions so you can see how this code has changed over time and it would give you a class thick and get her diff view.

14
00:03:29,880 --> 00:03:43,110
Of the differences between what you started with and what you have now of course we haven't made any changes and you can use this unified or split to see kind of d changes in line or split up into different parts rate here.

15
00:03:43,500 --> 00:04:03,870
We'll go back the code. In the right hand side i can use this key copy button to copy some code that would allow me to embed this. On an html page so you could just copy this and then paste it in an html page and it would show you kinda have a little window with an interactive sort of place where the gist will appear which is pretty useful.

16
00:04:04,260 --> 00:04:17,700
You can also download this just as a zip file and that would include all the different files that you have n the just. The gist is also a place where people can leave comments if you want to so I'll just say this is a.

17
00:04:18,240 --> 00:04:37,500
Pretty. Simple. Example of a. Bootstrap. Five. Navigation. And i'm going to say comment and sometimes people will leave your comments asking you to perhaps fix something or telling you if something is not working.

18
00:04:37,890 --> 00:04:50,640
If you've made your just public. Now from here you can also. Unsubscribe because you will get notifications if anybody comments. On your just so you can and click that off.

19
00:04:50,970 --> 00:04:59,820
You can also star not only your jests but any other jests that you see. On any website they are pretty popular and you'll see them all over the place.

20
00:05:00,300 --> 00:05:15,450
You can go back here to edit this or you can of course delete. The just with this button. There is also a place to take a look at the notifications. So we can take a look at our notifications and this is actually just a regular.

21
00:05:15,840 --> 00:05:31,260
Git hub notifications that's another link from the gist to the get her website and there are some options here. So you could take a look at your your adjusts the starred just which i'm not sure if i have anything yeah looks like i do have something.

22
00:05:31,800 --> 00:05:43,260
That i starred saw notice that this does look like your profile from git hub. And from here there's maybe. The place where you can get your help or you can switch again.

23
00:05:43,680 --> 00:05:57,480
Into your get her to take a look at your profile suggests fantastically useful. You could see that I've done two hundred guests over a period of time it's a fantastic place to store your code and there are.

24
00:05:57,900 --> 00:06:08,820
A lot of features that are related to get hub another thing that you could do is if you are in somebody else's just. You can actually fork a copy of it onto your own.

25
00:06:09,150 --> 00:06:26,130
So take a look at. Orton. And so you'll see an additional little sort of element when you click on one of the so say if i go to this component and i can click on fork and that would make a copy of this just.

26
00:06:26,610 --> 00:06:44,980
Put it in my own sort of just section but it would still give more credits so a lot of similar features to what you get and get hub. N as i mentioned it's a fantastic way of sort of keeping track of small pieces of code that you may want to go back into.


@@@
1
00:00:00,480 --> 00:00:12,390
We can give you the absolute fastest way to create simple documentation on github. The pretty interesting option too since it's a special type of repo that is attached to your own repo.

2
00:00:12,750 --> 00:00:37,590
Just a note that wikis are restricted for private repositories unless you have a pro account. So free example if we go over here to this wiki tab. You'll see that we can create a page for the wiki and again it's the fastest way of creating some quick documentation so i'm just going to leave the default here but you could see that we have a full featured editor so actually let's go ahead and do.

3
00:00:38,190 --> 00:01:04,900
Just a. Headline here will do a couple of headlines. Because it does add some additional features here. Let's see we'll call this. Alright will do that and you could see that there's lots of options or you can write markdown in here and there's also a preview button that shows you what this is going to look like you can add images add links.

4
00:01:05,190 --> 00:01:17,640
And anything that you can normally do in git hub and you have all these other formats that you can use by the traditional one is markdown. So you can also do an edit message this is sort of.

5
00:01:18,030 --> 00:01:33,600
Like a commit message that you can tie to when you make a change in here notice that it also says that you can drag and drop files. Or paste on which is cool so you can actually drag and drop like an image or something like that so one hit save page and now you notice.

6
00:01:34,050 --> 00:01:46,350
That i have a page over here on the right hand side and it also kept track of my headlines and he gave me like a little micro sort of structure here. For looking at.

7
00:01:46,680 --> 00:02:03,130
The pages so let's go ahead and add another one. And I'll call this about us. And let's e. About. Musical spoons. And I'll just read something in here.

8
00:02:03,920 --> 00:02:15,960
At once we're done let's go ahead. And save this page we'll leave the message blank. And now we have two pages and notice that it collapse this first one.

9
00:02:16,650 --> 00:02:31,800
And now i can navigate between the home page. And this about us page and if i open this up and i click on this hello world. This had a lot of content when you click on the heading.

10
00:02:32,220 --> 00:02:40,620
It would scroll down to the heading and notice that there's these little links so you can actually link directly to a heading. If your pages are getting a little bit long.

11
00:02:41,040 --> 00:02:58,570
So. Few other options here notice you have a little search. Box. If you wanted to find the page you've created or something in the page and you can add both accustomed footer an accustomed sidebar so this is where you maybe want to put some links.

12
00:02:58,650 --> 00:03:15,070
Could say something like check out. My. Blog. In output. Revo dot org. Right and i'm going to hit save page for this and now this is a a sort of let's see.

13
00:03:16,387 --> 00:03:28,270
Wonder if that will have to refresh the page but there it is down at the bottom and now it doesn't matter what page i go to that will appear at the bottom of every page and then you can also do the same thing with a little sidebar.

14
00:03:28,590 --> 00:03:50,889
My social. Media. Always at planet of the web. I'm going to save this page. And notice that this little message appears. Red years was not a very like super complicated or a super.

15
00:03:51,120 --> 00:04:03,210
Fancy website you get a very very simple website but if all you're doing is setting up your simple website perhaps before you have a chance to create something more complicated and.

16
00:04:03,600 --> 00:04:31,020
Then this is a fantastic thing to use. There's one more kind of advanced option but i just want to mention that really quick. You can actually clone this repository as i mentioned wikis are repositories that are sort of related to your repositories but you can clone them and work on them locally you can't you yet open up a code space which i think would be a fantastic addition but by cloning it locally if you want to sort of create a bunch of pages at once.

17
00:04:31,410 --> 00:04:50,100
You could just click right here and then clone it and then work on it separately one more thing you can go to settings and. Under general you can actually turn the wikis off if you don't want to see that tab not gonna delete your wiki same thing with issues if you don't want to see the issues you can.

18
00:04:50,490 --> 00:05:13,380
Click that off and now you don't see those tabs. Over here and then of course you can. Turn them back on and. It should retain to will go back to the wicked retains everything that you had in there because the repo that has all your files still exists and so as i mentioned is the best way to get a.

19
00:05:13,710 --> 00:05:24,339
Quick documentation site attached to a repo. And it's really not that bad i mean you can get quite a few pages going in here and it's easy enough to write things in markdown.


@@@
1
00:00:00,540 --> 00:00:09,270
In addition to wikis get hub lets you host and publish static content through their site for free. My personal blogs a matter of fact rainbow dot org.

2
00:00:09,720 --> 00:00:21,220
Is hosted by git hub. On their website and it's done completely for free so you can create quite a capable site as long as it has only static content.

3
00:00:21,960 --> 00:00:40,990
By the way get up pages is restricted for private repositories unless you have a pro account. By default you can use their github dot i o website or use your own custom domains and the way that you set this up is by going to the settings tab and then going down to pee jus rate here.

4
00:00:41,066 --> 00:00:53,280
You can see that that because this project has been going around for awhile we have set up a website for the project. At rebel dot org slash musical spoon so if i click on that you should be able to see.

5
00:00:53,640 --> 00:01:17,080
A preview of this website. Now the reason mine says rebel dot org and yours will probably see something like your username dot and get hub dot i owe is because i have added a custom domain and you can do that on a repo by repo basis or if you create a repository.

6
00:01:17,430 --> 00:01:39,000
That is called the same as your username and then use dot get hub that i owe then you can define a custom domain for that repo and it will also affect every other repo on the website so all of my get her pages will automatically publish to this domain and then slash the name.

7
00:01:39,360 --> 00:01:52,560
Of the project. So if i go into my repositories. Going to show you that if i look for planet of the web here. There is a project called planet of the web.

8
00:01:52,890 --> 00:02:06,840
Dot get hub dot i o and if you create dot repository than that repository will basically be the website for your get her projects. So if i come in here and i go to settings you'll see that.

9
00:02:07,260 --> 00:02:18,280
The repository name here is actually showing up as planet of the web dot github dot i o but if i scroll down you'll see that i have added. Under pages.

10
00:02:21,000 --> 00:02:37,470
Decide is live at rainbow dot Oregon and it was deployed. Using this information right here and i have defined my custom domain to go right here so that's how you set up a custom domain there is a little bit more work that you have to do.

11
00:02:37,890 --> 00:02:48,570
Add your domain http place but that is how you sort of tie everything together so let's go back into my musical spoon project that we've been working on.

12
00:02:49,110 --> 00:03:05,880
And I'll show you the rest of the setup for this. So here i am back on the settings for my project and then pages and in here what you'll notice is that under build and deployment.

13
00:03:06,240 --> 00:03:25,050
You can have one of two options deploy from a branch which is by far the easiest way to setup and get her page or to go through git hub actions. If you choose get home actions then you're going to have to choose some additional settings here you can use something called Jekyll which basically will take.

14
00:03:25,440 --> 00:03:48,960
A documents folder or some other folder with markdown files and convert those markdown files into websites little bit more complex it but you get a much nicer looking website and there are different templates that you can install to make it look go to sort of like little micro wordpress but built n n git hub and then you can also host a static html page here.

15
00:03:49,500 --> 00:04:04,770
I don't like to use this one because actually if you. Go back back and select source and deploy from a branch. Get help will make that a lot easier. So by default in here you can choose a specific branch that you want to use as your website.

16
00:04:05,100 --> 00:04:18,570
Doesn't have to be the main branch but then if you use the main branch it's going to look for any html pages in your code so if you had an index that html here at the root level it would act as your home page for that website.

17
00:04:18,930 --> 00:04:40,380
Now we have a docs folder where we put all our html files and i can use that as well so i'm gonna go back into settings and select. Pages. And notice that from here i can choose the folder which can either be the root folder or the docs subfolders that's pretty common.

18
00:04:40,710 --> 00:04:52,080
You don't put your documentation on the main level you just created docs folder and it all goes in there and you can choose a branch where all your files are.

19
00:04:52,440 --> 00:05:13,360
Now other times you may see a file called g h pages. In the old days that would be a separate branch. That was special because git hub would understand that that is the place where you were publishing your website so you just will create like a separate branch called gh pages and you just put a bay basic website right there.

20
00:05:13,770 --> 00:05:35,940
And as i mentioned you can do custom domains for individual websites that you want to publish. As well as enforce h t t p s. Right there. So this is a fantastic way of creating simple websites you can with deployment from either a branch or a git hub action.

21
00:05:36,360 --> 00:05:56,370
Cre ate a process that will use a build tool to generate a static website so you often see me do that when i do my slide shows. I have a build process that generates a website as well as a slideshow pages and that's done in a much more complicated way.

22
00:05:56,700 --> 00:06:07,320
If you want to find out more about it added an entire course called learning get her pages that shows you every which way to publish pages and it goes a little bit deeper into the the wiki.

23
00:06:07,680 --> 00:06:24,630
How you can create pages just in git hub itself using the read me file and you have done some of that already. How you can deploy get her pages as well as creating pages with Jekyll and also eleven t which shows you the build process the more complicated way.

24
00:06:25,050 --> 00:06:35,440
Of doing this but in the meantime if you just want to generate some simple pages from a docs folder then definitely get her pages is the best way to go.


@@@
1
00:00:01,080 --> 00:00:14,250
Thanks for watching i hope you enjoyed the course. That we have a lot more content on both get and get have including deep dives and more advanced concepts from great teachers like having Scotland and courses from people who work at github.

2
00:00:14,700 --> 00:00:26,260
If you want to keep up with what i'm up to you can follow me just about anywhere at planet of the web look for the livestreams a do here on LinkedIn. Check out my blog at rebel dot org see you next time.


